<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使二叉树所有路径值相等的最小代价</title>
    <link href="/2024/02/28/%E4%BD%BF%E4%BA%8C%E5%8F%89%E6%A0%91%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84%E5%80%BC%E7%9B%B8%E7%AD%89%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BB%A3%E4%BB%B7/"/>
    <url>/2024/02/28/%E4%BD%BF%E4%BA%8C%E5%8F%89%E6%A0%91%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84%E5%80%BC%E7%9B%B8%E7%AD%89%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BB%A3%E4%BB%B7/</url>
    
    <content type="html"><![CDATA[<p>给你一个整数 <code>n</code> 表示一棵 <strong>满二叉树</strong> 里面节点的数目，节点编号从 <code>1</code> 到 <code>n</code> 。根节点编号为 <code>1</code> ，树中每个非叶子节点 <code>i</code> 都有两个孩子，分别是左孩子 <code>2 * i</code> 和右孩子 <code>2 * i + 1</code> 。</p><p>树中每个节点都有一个值，用下标从 <strong>0</strong> 开始、长度为 <code>n</code> 的整数数组 <code>cost</code> 表示，其中 <code>cost[i]</code> 是第 <code>i + 1</code> 个节点的值。每次操作，你可以将树中 <strong>任意</strong> 节点的值 <strong>增加</strong> <code>1</code> 。你可以执行操作 <strong>任意</strong> 次。</p><p>你的目标是让根到每一个 <strong>叶子结点</strong> 的路径值相等。请你返回 <strong>最少</strong> 需要执行增加操作多少次。</p><p><strong>注意：</strong></p><ul><li><strong>满二叉树</strong> 指的是一棵树，它满足树中除了叶子节点外每个节点都恰好有 2 个子节点，且所有叶子节点距离根节点距离相同。</li><li><strong>路径值</strong> 指的是路径上所有节点的值之和。</li></ul><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2023/04/04/binaryytreeedrawio-4.png" alt="img"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 7, cost = [1,5,2,2,3,3,1]<br>输出：6<br>解释：我们执行以下的增加操作：<br>- 将节点<span class="hljs-number"> 4 </span>的值增加一次。<br>- 将节点<span class="hljs-number"> 3 </span>的值增加三次。<br>- 将节点<span class="hljs-number"> 7 </span>的值增加两次。<br>从根到叶子的每一条路径值都为<span class="hljs-number"> 9 </span>。<br>总共增加次数为<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 3 </span>+<span class="hljs-number"> 2 </span>=<span class="hljs-number"> 6 </span>。<br>这是最小的答案。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2023/04/04/binaryytreee2drawio.png" alt="img"></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入：<span class="hljs-built_in">n</span> = <span class="hljs-number">3</span>, cost = [<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]<br>输出：<span class="hljs-number">0</span><br>解释：两条路径已经有相等的路径值，所以不需要执行任何增加操作。 <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= n &lt;= 105</code></li><li><code>n + 1</code> 是 <code>2</code> 的幂</li><li><code>cost.length == n</code></li><li><code>1 &lt;= cost[i] &lt;= 104</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    public <span class="hljs-built_in">int</span> minIncrements(<span class="hljs-built_in">int</span> n, <span class="hljs-built_in">int</span>[] cost) &#123;<br>        <span class="hljs-built_in">int</span> ans = <span class="hljs-number">0</span>;<br>        // 逆序遍历树<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = n - <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-number">2</span>) &#123;<br>            // 对于兄弟节点，其他任意节点的操作都不会影响根到该兄弟节点是否相同<br>            // 所以只能操作兄弟节点其中一个<br>            ans += Math.<span class="hljs-built_in">abs</span>(cost[i] - cost[i + <span class="hljs-number">1</span>]);<br>            // 将兄弟节点的父节点的值+修改后一致的值<br>            // 叶节点 i 和 i+<span class="hljs-number">1</span> 的双亲节点下标为 i/<span class="hljs-number">2</span>（整数除法）<br>            cost[i / <span class="hljs-number">2</span>] += Math.<span class="hljs-built_in">max</span>(cost[i], cost[i + <span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树遍历（非递归）</title>
    <link href="/2024/02/11/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%EF%BC%88%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/"/>
    <url>/2024/02/11/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%EF%BC%88%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        ans = []<br>        stack = [root]<br>        <span class="hljs-keyword">while</span> stack:<br>            p = stack.pop()<br>            <span class="hljs-keyword">if</span> p <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">continue</span><br>            ans.append(p.val)<br>            stack.append(p.right)<br>            stack.append(p.left)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        ans = []<br>        stack = [(root, <span class="hljs-number">1</span>)]<br>        <span class="hljs-keyword">while</span> stack:<br>            p, c = stack.pop()<br>            <span class="hljs-keyword">if</span> p <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> c == <span class="hljs-number">0</span>:<br>                ans.append(p.val)<br>            <span class="hljs-keyword">else</span>:<br>                stack.append((p.right, <span class="hljs-number">1</span>))<br>                stack.append((p, <span class="hljs-number">0</span>))<br>                stack.append((p.left, <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        ans = []<br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> ans<br>        stack = [(root, <span class="hljs-number">1</span>)]<br>        <span class="hljs-keyword">while</span> stack:<br>            p, c = stack.pop()<br>            <span class="hljs-keyword">if</span> p <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> c == <span class="hljs-number">0</span>:<br>                ans.append(p.val)<br>            <span class="hljs-keyword">else</span>:<br>                stack.append((p, <span class="hljs-number">0</span>))<br>                stack.append((p.right, <span class="hljs-number">1</span>))<br>                stack.append((p.left, <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java的集合</title>
    <link href="/2024/01/18/Java%E7%9A%84%E9%9B%86%E5%90%88/"/>
    <url>/2024/01/18/Java%E7%9A%84%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><p>Collection接口的子接口有List、Set和Queue</p><p>Collection接口中有下面几个方法</p><ul><li>add(Object obj): 向Collection集合中添加元素</li><li>addAll(Collection coll)：向Collection集合中添加另一个集合中的所有元素</li><li>int size()：获取Collection集合中的元素数量</li><li>void clear()：清除Collection集合中所有元素</li><li>boolean isEmpty()：判断Collection集合是否为空</li><li>boolean contains(Object obj)：判断Collection集合是否包含某个元素</li><li>boolean containsAll(Collection c)：判断一个Collection集合是否包含另一个Collection集合中的所有元素</li><li>boolean remove(Object obj)：向Collection集合中删除某个元素</li><li>boolean removeAll(Collection c)：</li><li>boolean retainAll(Collection c)</li><li>boolean equels(Object obj)</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List集合下有ArrayList和LinkedList两个实现类</p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set集合下有HashSet、LinkedHashSet和TreeSet实现类。</p><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试算法题（构造输入）</title>
    <link href="/2024/01/18/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88%E6%9E%84%E9%80%A0%E8%BE%93%E5%85%A5%EF%BC%89/"/>
    <url>/2024/01/18/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88%E6%9E%84%E9%80%A0%E8%BE%93%E5%85%A5%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="构造二叉树"><a href="#构造二叉树" class="headerlink" title="构造二叉树"></a>构造二叉树</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    root = TreeNode(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>])<br>    idx = <span class="hljs-number">1</span><br>    queue = [root]<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span>:<br>        size = <span class="hljs-built_in">len</span>(queue)<br>        <span class="hljs-keyword">while</span> size &gt; <span class="hljs-number">0</span>:<br>            size -= <span class="hljs-number">1</span><br>            p = queue[<span class="hljs-number">0</span>]<br>            queue = queue[<span class="hljs-number">1</span>:]<br>            <span class="hljs-keyword">if</span> idx &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">list</span>[idx] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                p.left = TreeNode(<span class="hljs-built_in">list</span>[idx])<br>                queue.append(p.left)<br>            idx += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> idx &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">list</span>[idx] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                p.right = TreeNode(<span class="hljs-built_in">list</span>[idx])<br>                queue.append(p.right)<br>            idx += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateTreeNode</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>&#123;<br>        <span class="hljs-type">int</span> val;<br>        TreeNode left;<br>        TreeNode right;<br>        TreeNode() &#123;&#125;<br>        TreeNode(<span class="hljs-type">int</span> v)&#123;<br>            val = v;<br>        &#125;<br>        TreeNode(<span class="hljs-type">int</span> v, TreeNode l, TreeNode r)&#123;<br>            val = v;<br>            left = l;<br>            right = r;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TreeNode <span class="hljs-title function_">create</span><span class="hljs-params">(Integer[] nums)</span>&#123;<br>        <span class="hljs-keyword">if</span>(nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(nums[<span class="hljs-number">0</span>]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        LinkedList&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        queue.add(root);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> queue.size();<br>            <span class="hljs-keyword">while</span>(size-- &gt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> queue.poll();<br>                <span class="hljs-keyword">if</span>(idx &lt; nums.length &amp;&amp; nums[idx] != <span class="hljs-literal">null</span>)&#123;<br>                    p.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(nums[idx]);<br>                    queue.offer(p.left);<br>                &#125;<br>                idx++;<br>                <span class="hljs-keyword">if</span>(idx &lt; nums.length &amp;&amp; nums[idx] != <span class="hljs-literal">null</span>)&#123;<br>                    p.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(nums[idx]);<br>                    queue.offer(p.right);<br>                &#125;<br>                idx++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">(TreeNode root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> ;<br>        System.out.print(<span class="hljs-string">&quot; &quot;</span> + root.val);<br>        preOrder(root.left);<br>        preOrder(root.right);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Integer[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> create(nums);<br>        preOrder(root);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="构造链表"><a href="#构造链表" class="headerlink" title="构造链表"></a>构造链表</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[1,2,4]</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkNode</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    head = LinkNode(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>])<br>    p = head<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)):<br>        p.<span class="hljs-built_in">next</span> = LinkNode(<span class="hljs-built_in">list</span>[i])<br>        p = p.<span class="hljs-built_in">next</span><br>    <span class="hljs-keyword">return</span> head<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树层次遍历（ACM机制）</title>
    <link href="/2024/01/18/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%EF%BC%88%E4%B8%8D%E5%BB%BA%E6%A0%91%EF%BC%89/"/>
    <url>/2024/01/18/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%EF%BC%88%E4%B8%8D%E5%BB%BA%E6%A0%91%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[3,9,20,null,null,15,7]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[3]</span>,<span class="hljs-comment">[9,20]</span>,<span class="hljs-comment">[15,7]</span>]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：root = [<span class="hljs-number">1</span>]<br>输出：<span class="hljs-string">[[1]]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><h3 id="不建树代码"><a href="#不建树代码" class="headerlink" title="不建树代码"></a>不建树代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">7</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">slove</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):<br>    queue = [[<span class="hljs-number">0</span>, <span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>]]]<br>    ans = []<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span>:<br>        size = <span class="hljs-built_in">len</span>(queue)<br>        l = []<br>        <span class="hljs-keyword">while</span> size &gt; <span class="hljs-number">0</span>:<br>            size -= <span class="hljs-number">1</span><br>            idx, value = queue[<span class="hljs-number">0</span>]<br>            l.append(value)<br>            queue = queue[<span class="hljs-number">1</span>:]<br>            left = (idx + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span><br>            right = (idx + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> left &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">list</span>[left] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                queue.append([left, <span class="hljs-built_in">list</span>[left]])<br>            <span class="hljs-keyword">if</span> right &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">list</span>[right] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                queue.append([right, <span class="hljs-built_in">list</span>[right]])<br>        ans.append(l)<br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="建树代码"><a href="#建树代码" class="headerlink" title="建树代码"></a>建树代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">7</span>]<br><br><span class="hljs-comment"># 根据list层次建立二叉树</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    root = TreeNode(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>])<br>    idx = <span class="hljs-number">1</span><br>    queue = [root]<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span>:<br>        size = <span class="hljs-built_in">len</span>(queue)<br>        <span class="hljs-keyword">while</span> size &gt; <span class="hljs-number">0</span>:<br>            size -= <span class="hljs-number">1</span><br>            p = queue[<span class="hljs-number">0</span>]<br>            queue = queue[<span class="hljs-number">1</span>:]<br>            <span class="hljs-keyword">if</span> idx &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">list</span>[idx] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                p.left = TreeNode(<span class="hljs-built_in">list</span>[idx])<br>                queue.append(p.left)<br>            idx += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> idx &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">list</span>[idx] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                p.right = TreeNode(<span class="hljs-built_in">list</span>[idx])<br>                queue.append(p.right)<br>            idx += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> root<br><br><span class="hljs-comment"># 层次遍历</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">slove</span>(<span class="hljs-params">root</span>):<br>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> []<br>    ans = []<br>    queue = [root]<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span>:<br>        size = <span class="hljs-built_in">len</span>(queue)<br>        l = []<br>        <span class="hljs-keyword">while</span> size &gt; <span class="hljs-number">0</span>:<br>            size -= <span class="hljs-number">1</span><br>            p = queue[<span class="hljs-number">0</span>]<br>            l.append(p.val)<br>            queue = queue[<span class="hljs-number">1</span>:]<br>            <span class="hljs-keyword">if</span> p.left <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                queue.append(p.left)<br>            <span class="hljs-keyword">if</span> p.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                queue.append(p.right)<br>        ans.append(l)<br>    <span class="hljs-keyword">return</span> ans<br><br>root = create(<span class="hljs-built_in">list</span>)<br><span class="hljs-built_in">print</span>(slove(root))<br></code></pre></td></tr></table></figure><p>边建树，边遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):<br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">7</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    root = TreeNode(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>])<br>    idx = <span class="hljs-number">1</span><br>    queue = [root]<br>    ans = []<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span>:<br>        size = <span class="hljs-built_in">len</span>(queue)<br>        l = []<br>        <span class="hljs-keyword">while</span> size &gt; <span class="hljs-number">0</span>:<br>            size -= <span class="hljs-number">1</span><br>            p = queue[<span class="hljs-number">0</span>]<br>            l.append(p.val)<br>            queue = queue[<span class="hljs-number">1</span>:]<br>            <span class="hljs-keyword">if</span> idx &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">list</span>[idx] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                p.left = TreeNode(<span class="hljs-built_in">list</span>[idx])<br>                queue.append(p.left)<br>            idx += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> idx &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">list</span>[idx] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                p.right = TreeNode(<span class="hljs-built_in">list</span>[idx])<br>                queue.append(p.right)<br>            idx += <span class="hljs-number">1</span><br>        ans.append(l)<br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下一个排列</title>
    <link href="/2024/01/11/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/"/>
    <url>/2024/01/11/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>整数数组的一个 <strong>排列</strong> 就是将其所有成员以序列或线性顺序排列。</p><ul><li>例如，<code>arr = [1,2,3]</code> ，以下这些都可以视作 <code>arr</code> 的排列：<code>[1,2,3]</code>、<code>[1,3,2]</code>、<code>[3,1,2]</code>、<code>[2,3,1]</code> 。</li></ul><p>整数数组的 <strong>下一个排列</strong> 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 <strong>下一个排列</strong> 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p><ul><li>例如，<code>arr = [1,2,3]</code> 的下一个排列是 <code>[1,3,2]</code> 。</li><li>类似地，<code>arr = [2,3,1]</code> 的下一个排列是 <code>[3,1,2]</code> 。</li><li>而 <code>arr = [3,2,1]</code> 的下一个排列是 <code>[1,2,3]</code> ，因为 <code>[3,2,1]</code> 不存在一个字典序更大的排列。</li></ul><p>给你一个整数数组 <code>nums</code> ，找出 <code>nums</code> 的下一个排列。</p><p>必须**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地 </a>**修改，只允许使用额外常数空间。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,2,3]</span><br>输出：<span class="hljs-comment">[1,3,2]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,2,1]</span><br>输出：<span class="hljs-comment">[1,2,3]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,1,5]</span><br>输出：<span class="hljs-comment">[1,5,1]</span> <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 100</code></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nextPermutation</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> i = n - <span class="hljs-number">2</span>, j = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 从后往前遍历，如果当前位置的值 小于 后一个值，说明该位置应该由一个较大的值来替换</span><br>        <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="hljs-number">1</span>]) i--;<br>        <span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 找到比nums[i]大的最小值</span><br>            <span class="hljs-keyword">while</span>(j &gt;=<span class="hljs-number">0</span> &amp;&amp; nums[i] &gt;= nums[j]) j--;<br>            <span class="hljs-comment">// 两者交换</span><br>            <span class="hljs-built_in">swap</span>(nums[i], nums[j]);<br>        &#125;<br>        <span class="hljs-comment">// i 后面的值颠倒顺序</span><br>        <span class="hljs-built_in">reverse</span>(nums.<span class="hljs-built_in">begin</span>()+ i + <span class="hljs-number">1</span>, nums.<span class="hljs-built_in">end</span>()); <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">nextPermutation</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        i = n - <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 找到最右边的</span><br>        <span class="hljs-keyword">while</span> i &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] &gt;= nums[i + <span class="hljs-number">1</span>]:<br>            i -= <span class="hljs-number">1</span><br>        <span class="hljs-comment"># i &lt; 0 表示当前排列是最大的</span><br>        <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">0</span>:<br>            j = n - <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 找到第一个大于nums[i]的位置</span><br>            <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] &gt;= nums[j]:<br>                j -= <span class="hljs-number">1</span><br>            nums[i], nums[j] = nums[j], nums[i]<br>        <br>        left, right = i + <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            nums[left], nums[right] = nums[right], nums[left]<br>            left += <span class="hljs-number">1</span><br>            right -= <span class="hljs-number">1</span><br>      <br></code></pre></td></tr></table></figure><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> nums[l];<br>        nums[l] = nums[r];<br>        nums[r] = t;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nextPermutation</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">2</span>, j = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="hljs-number">1</span>]) i--;<br>        <span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt;= nums[j]) j--;<br>            swap(nums, i, j);<br>        &#125;<br>        i++;<br>        j = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i &lt; j)&#123;<br>            swap(nums, i++, j--);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/2024/01/10/%E6%A0%88/"/>
    <url>/2024/01/10/%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h2 id="394-字符串解码"><a href="#394-字符串解码" class="headerlink" title="394. 字符串解码"></a><a href="https://leetcode.cn/problems/decode-string/">394. 字符串解码</a></h2><p>给定一个经过编码的字符串，返回它解码后的字符串。</p><p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <code>encoded_string</code> 正好重复 <code>k</code> 次。注意 <code>k</code> 保证为正整数。</p><p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p><p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <code>k</code> ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code> 的输入。</p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3[a]2[bc]&quot;</span><br>输出：<span class="hljs-string">&quot;aaabcbc&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3[a2[c]]&quot;</span><br>输出：<span class="hljs-string">&quot;accaccacc&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2[abc]3[cd]ef&quot;</span><br>输出：<span class="hljs-string">&quot;abcabccdcdcdef&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc3[cd]xyz&quot;</span><br>输出：<span class="hljs-string">&quot;abccdcdcdxyz&quot;</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 30</code></li><li><code>s</code> 由小写英文字母、数字和方括号 <code>&#39;[]&#39;</code> 组成</li><li><code>s</code> 保证是一个 <strong>有效</strong> 的输入。</li><li><code>s</code> 中所有整数的取值范围为 <code>[1, 300]</code></li></ul><p><strong>解法</strong></p><p>记录每个时间段的num和str，若遇到左括号，那么保存当前的num和str状态到栈中，若遇到右括号，弹栈，得到新的str状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decodeString</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        stack = []<br>        <span class="hljs-built_in">str</span>, num = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> ch.isdigit(): <span class="hljs-comment"># 是数字</span><br>                num = num * <span class="hljs-number">10</span> + <span class="hljs-built_in">int</span>(ch)<br>            <span class="hljs-keyword">elif</span> ch.isalpha(): <span class="hljs-comment"># 是字母</span><br>                <span class="hljs-built_in">str</span> += ch<br>            <span class="hljs-keyword">elif</span> ch == <span class="hljs-string">&#x27;[&#x27;</span>:<br>                stack.append([num, <span class="hljs-built_in">str</span>])<br>                <span class="hljs-built_in">str</span>, num = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span><br>            <span class="hljs-keyword">else</span>:<br>                _num, _<span class="hljs-built_in">str</span> = stack.pop()<br>                <span class="hljs-built_in">str</span> = _<span class="hljs-built_in">str</span> + <span class="hljs-built_in">str</span> * _num<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈、字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优先队列</title>
    <link href="/2024/01/10/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <url>/2024/01/10/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="数据流的中位数"><a href="#数据流的中位数" class="headerlink" title="数据流的中位数"></a>数据流的中位数</h2><p><strong>中位数</strong>是有序整数列表中的中间值。如果列表的大小是偶数，则没有中间值，中位数是两个中间值的平均值。</p><ul><li>例如 <code>arr = [2,3,4]</code> 的中位数是 <code>3</code> 。</li><li>例如 <code>arr = [2,3]</code> 的中位数是 <code>(2 + 3) / 2 = 2.5</code> 。</li></ul><p>实现 MedianFinder 类:</p><ul><li><code>MedianFinder() </code>初始化 <code>MedianFinder</code> 对象。</li><li><code>void addNum(int num)</code> 将数据流中的整数 <code>num</code> 添加到数据结构中。</li><li><code>double findMedian()</code> 返回到目前为止所有元素的中位数。与实际答案相差 <code>10-5</code> 以内的答案将被接受。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入<br>[<span class="hljs-string">&quot;MedianFinder&quot;</span>, <span class="hljs-string">&quot;addNum&quot;</span>, <span class="hljs-string">&quot;addNum&quot;</span>, <span class="hljs-string">&quot;findMedian&quot;</span>, <span class="hljs-string">&quot;addNum&quot;</span>, <span class="hljs-string">&quot;findMedian&quot;</span>]<br>[[], [<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>], [], [<span class="hljs-number">3</span>], []]<br>输出<br>[null, null, null, <span class="hljs-number">1.5</span>, null, <span class="hljs-number">2.0</span>]<br><br>解释<br><span class="hljs-symbol">MedianFinder</span> medianFinder = new <span class="hljs-symbol">MedianFinder</span>();<br>medianFinder.addNum(<span class="hljs-number">1</span>);    // arr = [<span class="hljs-number">1</span>]<br>medianFinder.addNum(<span class="hljs-number">2</span>);    // arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>medianFinder.findMedian(); // 返回 <span class="hljs-number">1.5</span> ((<span class="hljs-number">1</span> + <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>)<br>medianFinder.addNum(<span class="hljs-number">3</span>);    // arr[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>medianFinder.findMedian(); // return <span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>-105 &lt;= num &lt;= 105</code></li><li>在调用 <code>findMedian</code> 之前，数据结构中至少有一个元素</li><li>最多 <code>5 * 104</code> 次调用 <code>addNum</code> 和 <code>findMedian</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MedianFinder</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.queMin = [] <span class="hljs-comment"># 前一部分，伪大跟堆</span><br>        self.queMax = [] <span class="hljs-comment"># 后一半，小根堆</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addNum</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.queMin <span class="hljs-keyword">or</span> num &lt;= -self.queMin[<span class="hljs-number">0</span>]:<br>            heappush(self.queMin, -num)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.queMin) - <span class="hljs-number">1</span> &gt; <span class="hljs-built_in">len</span>(self.queMax):<br>                heappush(self.queMax, -heappop(self.queMin))<br>        <span class="hljs-keyword">else</span>:<br>            heappush(self.queMax, num)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.queMax) &gt; <span class="hljs-built_in">len</span>(self.queMin):<br>                heappush(self.queMin, -heappop(self.queMax))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMedian</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">float</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.queMin) &gt; <span class="hljs-built_in">len</span>(self.queMax):<br>            <span class="hljs-keyword">return</span> -self.queMin[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">return</span> (-self.queMin[<span class="hljs-number">0</span>] + self.queMax[<span class="hljs-number">0</span>]) / <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>优先队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring事务</title>
    <link href="/2024/01/08/Spring%E4%BA%8B%E5%8A%A1/"/>
    <url>/2024/01/08/Spring%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>Spring事务的本质是通过SpringAOP生成代理对象</p><h2 id="Spring事务的优先级和自定义切面类的优先级"><a href="#Spring事务的优先级和自定义切面类的优先级" class="headerlink" title="Spring事务的优先级和自定义切面类的优先级"></a>Spring事务的优先级和自定义切面类的优先级</h2><p>当自己使用SpringAOP定义切面类，没有指定Order时，默认Order为Integer.MAX(最低)，但是Spring事务的代理对象的Order也是Integer.MAX(最低)，但是默认会将Spring事务排在前面，即先执行Spring事务的切面类，再执行自定义的切面类。因为Spring扫描的时候会先扫到Spring事务。</p><p>此时若自定义的切面类中遇到异常没有抛出，那么Spring事务就会认为没有发送异常。</p><p>解决方法：</p><ul><li>在自定义切面类时使用<code>@Order</code> 注解，value小于Integer.MAX即可</li><li>自定义切面类时遇到异常不要捕获，或者捕获后再抛出</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2024/01/07/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2024/01/07/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h2 id="通配符匹配"><a href="#通配符匹配" class="headerlink" title="通配符匹配"></a>通配符匹配</h2><p>给你一个输入字符串 (<code>s</code>) 和一个字符模式 (<code>p</code>) ，请你实现一个支持 <code>&#39;?&#39;</code> 和 <code>&#39;*&#39;</code> 匹配规则的通配符匹配：</p><ul><li><code>&#39;?&#39;</code> 可以匹配任何单个字符。</li><li><code>&#39;*&#39;</code> 可以匹配任意字符序列（包括空字符序列）。</li></ul><p>判定匹配成功的充要条件是：字符模式必须能够 <strong>完全匹配</strong> 输入字符串（而不是部分匹配）。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-attr">p</span> = <span class="hljs-string">&quot;a&quot;</span><br>输出：<span class="hljs-literal">false</span><br>解释：<span class="hljs-string">&quot;a&quot;</span> 无法匹配 <span class="hljs-string">&quot;aa&quot;</span> 整个字符串。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入：s = <span class="hljs-string">&quot;aa&quot;</span>, p = <span class="hljs-string">&quot;*&quot;</span><br>输出：<span class="hljs-literal">true</span><br>解释：<span class="hljs-string">&#x27;*&#x27;</span> 可以匹配任意字符串。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入：s = <span class="hljs-string">&quot;cb&quot;</span>, p = <span class="hljs-string">&quot;?a&quot;</span><br>输出：<span class="hljs-literal">false</span><br>解释：<span class="hljs-string">&#x27;?&#x27;</span> 可以匹配 <span class="hljs-string">&#x27;c&#x27;</span>, 但第二个 <span class="hljs-string">&#x27;a&#x27;</span> 无法匹配 <span class="hljs-string">&#x27;b&#x27;</span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li><li><code>s</code> 仅由小写英文字母组成</li><li><code>p</code> 仅由小写英文字母、<code>&#39;?&#39;</code> 或 <code>&#39;*&#39;</code> 组成</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isMatch</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        m, n = <span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">len</span>(p)<br>        <span class="hljs-comment"># dp[i][j]表示s[:i]和p[j:]是否能够匹配</span><br>        dp = [[<span class="hljs-literal">False</span>] * (n + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>)]<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-literal">True</span><br>        <span class="hljs-comment"># p 前面连续的*可以和空的s匹配</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> p[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>: dp[<span class="hljs-number">0</span>][i] = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>: <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>                <span class="hljs-comment"># 匹配符为*，那么s[:i]和p[:j] = s[:i - 1]和p[:j] 或者 s[:i]和p[:j - 1]是否能匹配</span><br>                <span class="hljs-keyword">if</span> p[j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] | dp[i][j - <span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">elif</span> p[j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;?&#x27;</span> <span class="hljs-keyword">or</span> s[i - <span class="hljs-number">1</span>] == p[j - <span class="hljs-number">1</span>]:<br>                    dp[i][j] = dp[i- <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> dp[m][n]    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令</title>
    <link href="/2024/01/06/Linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/01/06/Linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="awk命令"><a href="#awk命令" class="headerlink" title="awk命令"></a>awk命令</h2><p>逐行读取文本，默认以空格或tab键为分隔符进行分隔，将分隔所得的各个字段保存到内建变量中，并按模式或者条件执行编辑命令。</p><h3 id="awk常见的内建变量"><a href="#awk常见的内建变量" class="headerlink" title="awk常见的内建变量"></a>awk常见的内建变量</h3><p>FS：列分割符。指定每行文本的字段分隔符，默认为空格或制表位。与”-F”作用相同<br>NF：当前处理的行的字段个数。<br>NR：当前处理的行的行号（序数）。<br>$0：当前处理的行的整行内容。<br>$n：当前处理行的第n个字段（第n列）。<br>FILENAME：被处理的文件名。<br>RS：行分隔符。awk从文件上读取资料时,将根据RS的定义把读取的资料切割成许多条记录,而awk一次仅读入一条记录,以进行处理。预设值是’\n’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 读取log.txt每一行以冒号切分的第一个</span><br>awk -F <span class="hljs-string">&quot;:&quot;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> log.txt<br><br><span class="hljs-comment"># 使用cal.awk脚本来对log.txt的每行进行处理</span><br>awk -f cal.awk log.txt<br><br><span class="hljs-comment"># 求ps aux命令的 内存之和</span><br>awk <span class="hljs-string">&#x27;BEGIN&#123;sum=0&#125; NR &gt; 1 &#123;sum += $4&#125; END&#123;print sum&#125;&#x27;</span> nowcoder.txt<br><br><span class="hljs-comment"># 删除log.txt中有this的行</span><br>sed <span class="hljs-string">&#x27;/this/d&#x27;</span> log.txt<br><br><span class="hljs-comment"># sort -r 逆序排序   uniq -c 去重，并输出次数</span><br>awk <span class="hljs-string">&#x27;&#123;print$1&#125;&#x27;</span> | <span class="hljs-built_in">sort</span> -r | <span class="hljs-built_in">uniq</span> -c | awk <span class="hljs-string">&#x27;($1 &gt; 3) &#123;print $1,$2&#125;&#x27;</span><br><br><span class="hljs-comment"># awk -F 输入分隔符  -v 输出分隔符</span><br>awk <span class="hljs-string">&#x27;&#123;print$4&#125;&#x27;</span> | awk -F <span class="hljs-string">&quot;:&quot;</span> -v OFS=<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print$2,$3&#125;&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -r | awk <span class="hljs-string">&#x27;&#123;print$1,$2&#125;&#x27;</span><br><br><span class="hljs-comment"># sort -n 对计数进行排序</span><br>grep <span class="hljs-string">&#x27;tcp&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print$6&#125;&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr | awk <span class="hljs-string">&#x27;&#123;print$2,$1&#125;&#x27;</span><br><br><span class="hljs-comment"># printf 格式输出</span><br>awk <span class="hljs-string">&#x27;BEGIN&#123;sum=0&#125; &#123;if(NR &gt; 1)&#123;sum+=$1&#125;&#125; END&#123;printf (&quot;%.3f&quot;,sum/(NR - 1))&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h2><p>按照脚本的命令来处理、编辑文本文件</p><p><code>sed [option] [action] [files]</code></p><ul><li><p>option：</p><ul><li>-e：以指定的script来处理文本文件</li><li>-n：只显示处理后的结果</li></ul></li><li><p>action：</p><ul><li>a：新增一行（指定行的下一行）</li><li>c：取代</li><li>d：删除</li><li>i：插入（指定行的上一行）</li><li>p：打印</li><li>s：可以搭配正在表达式进行取代</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除1-3行</span><br>sed -e <span class="hljs-string">&#x27;1,3d&#x27;</span> a.txt<br><br><span class="hljs-comment"># 匹配存在hello的行，然后打印</span><br>sed -n <span class="hljs-string">&#x27;/hello/p&#x27;</span> a.txt<br><br><span class="hljs-comment"># 在第1行下面插入新行 hello</span><br>sed -i <span class="hljs-string">&#x27;1 a hello&#x27;</span> a.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>grep命令是用来进行正则表达式匹配的</p><p><code>grep [option] pattern [files]</code> </p><ul><li>option：选项<ul><li>-i：忽略大小写</li><li>-v：反向查找，只输出不匹配的行</li><li>-n：显示匹配的行数</li><li>-r：递归查找子目录的文件</li><li>-l：只打印匹配的文件名</li><li>-c：只打印匹配的行数</li><li>-E：</li></ul></li><li>pattern：正则表达式</li><li>files：要查找的文件</li></ul><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><h4 id="列出用户的所有进程"><a href="#列出用户的所有进程" class="headerlink" title="列出用户的所有进程"></a>列出用户的所有进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">ps -u username<br></code></pre></td></tr></table></figure><h4 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> PID<br></code></pre></td></tr></table></figure><h4 id="杀死某用户所有进程"><a href="#杀死某用户所有进程" class="headerlink" title="杀死某用户所有进程"></a>杀死某用户所有进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">killall -u username<br></code></pre></td></tr></table></figure><h4 id="服务器之间传数据"><a href="#服务器之间传数据" class="headerlink" title="服务器之间传数据"></a>服务器之间传数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r -P 目标服务器端口 当前要传文件的路径 username@ip地址:目的文件路径<br></code></pre></td></tr></table></figure><h4 id="tmux-命令"><a href="#tmux-命令" class="headerlink" title="tmux 命令"></a>tmux 命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux new -s &lt;name&gt; 创建一个名字为name的终端<br>tmux <span class="hljs-built_in">ls</span> 列出目前终端中存在哪些会话<br>tmux a -t &lt;name&gt; 从终端中进入名字为name的会话中<br>ctrl+b 再按下d 则可以退出终端<br>ctrl+b 再按下s 则可以在会话中直接切换到其他会话中，就不用退出再重新进入其他会话<br>tmux kill-session -t &lt;name&gt; 删除名字为name的会话这个一般不常用谁没事删这个<br></code></pre></td></tr></table></figure><h4 id="统计文件夹大小并排序"><a href="#统计文件夹大小并排序" class="headerlink" title="统计文件夹大小并排序"></a>统计文件夹大小并排序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -sh * 2&gt;/dev/null | <span class="hljs-built_in">sort</span> -hr<br><br><span class="hljs-comment"># 获取本文件夹的大小</span><br><span class="hljs-built_in">du</span> -sh<br><span class="hljs-comment"># 获取本文件夹下所有文件的大小</span><br><span class="hljs-built_in">du</span> -sh *<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Fluid主题添加音乐</title>
    <link href="/2024/01/06/Hexo-Fluid%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/"/>
    <url>/2024/01/06/Hexo-Fluid%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h2 id="安装音乐插件"><a href="#安装音乐插件" class="headerlink" title="安装音乐插件"></a>安装音乐插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在hexo目录下安装插件</span><br>npm install --save hexo-tag-aplayer<br></code></pre></td></tr></table></figure><h2 id="自定义HTML"><a href="#自定义HTML" class="headerlink" title="自定义HTML"></a>自定义HTML</h2><p>在Fluid主题的_config.yml添加自定义HTML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_html:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string"> &lt;!--音乐--&gt;</span><br><span class="hljs-string">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;&gt;</span><br><span class="hljs-string">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">  &lt;div id=&quot;player&quot; class=&quot;aplayer aplayer-withlist aplayer-fixed&quot; data-id=&quot;9120771084&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-order=&quot;random&quot; data-fixed=&quot;true&quot; data-listfolded=&quot;true&quot; data-theme=&quot;#2D8CF0&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="新建音乐页面"><a href="#新建音乐页面" class="headerlink" title="新建音乐页面"></a>新建音乐页面</h2><h3 id="1-添加音乐页面"><a href="#1-添加音乐页面" class="headerlink" title="1. 添加音乐页面"></a>1. 添加音乐页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page playlist<br></code></pre></td></tr></table></figure><h3 id="2-在主题配置文件中的nemu处，添加音乐配置"><a href="#2-在主题配置文件中的nemu处，添加音乐配置" class="headerlink" title="2.在主题配置文件中的nemu处，添加音乐配置"></a>2.在主题配置文件中的nemu处，添加音乐配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">- &#123; key: <span class="hljs-string">&quot;playlist&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/playlist/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="3-在音乐页面添加具体的歌单"><a href="#3-在音乐页面添加具体的歌单" class="headerlink" title="3.在音乐页面添加具体的歌单"></a>3.在音乐页面添加具体的歌单</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&#123;% meting <span class="hljs-string">&quot;9120771084&quot;</span> <span class="hljs-string">&quot;netease&quot;</span> <span class="hljs-string">&quot;playlist&quot;</span> <span class="hljs-string">&quot;theme:#3F51B5&quot;</span> <span class="hljs-string">&quot;mutex:true&quot;</span> <span class="hljs-string">&quot;preload:auto&quot;</span> %&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td></td><td>必须值 歌曲 id &#x2F; 播放列表 id &#x2F; 相册 id &#x2F; 搜索关键字</td></tr><tr><td>server</td><td></td><td>必须值 音乐平台: netease, tencent, kugou, xiami, baidu</td></tr><tr><td>type</td><td></td><td>必须值 song, playlist, album, search, artist</td></tr><tr><td>fixed</td><td>false</td><td>开启固定模式</td></tr><tr><td>mini</td><td>false</td><td>开启迷你模式</td></tr><tr><td>loop</td><td>all</td><td>列表循环模式：all, one,none</td></tr><tr><td>order</td><td>list</td><td>列表播放模式： list, random</td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td>false</td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td>metingjs</td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td>true</td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td>true</td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td>340px</td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td>auto</td><td>音乐文件预载入模式，可选项： none, metadata, auto</td></tr><tr><td>theme</td><td>#ad7a86</td><td>播放器风格色彩设置</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac管理nodejs</title>
    <link href="/2024/01/06/Mac%E7%AE%A1%E7%90%86nodejs/"/>
    <url>/2024/01/06/Mac%E7%AE%A1%E7%90%86nodejs/</url>
    
    <content type="html"><![CDATA[<h2 id="下载nvm工具"><a href="#下载nvm工具" class="headerlink" title="下载nvm工具"></a>下载nvm工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查找homebrew是否有nvm</span><br>brew search mvn <br><span class="hljs-comment"># 安装mvn</span><br>brew install nvm <br></code></pre></td></tr></table></figure><h2 id="使用nvm工具"><a href="#使用nvm工具" class="headerlink" title="使用nvm工具"></a>使用nvm工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看nvm支持的所有node版本</span><br>nvm <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 安装最新的nodejs</span><br>nvm install node<br><span class="hljs-comment"># 安装指定版本的nodejs</span><br>nvm install 20.10.0<br><span class="hljs-comment"># 安装某个版本长期维护的版本</span><br>nvm install 20<br><br><span class="hljs-comment"># 指定某个版本为默认node</span><br>nvm <span class="hljs-built_in">alias</span> default 20<br><br><span class="hljs-comment"># 切换nodejs</span><br>nvm use 20<br>nvm use 20.10.0<br>nvm use default<br><br><span class="hljs-comment"># 卸载node</span><br>nvm uninstall 20.10.0<br><br><span class="hljs-comment"># 卸载nvm</span><br>nvm unload<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2024/01/06/%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/01/06/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="随机链表的复制"><a href="#随机链表的复制" class="headerlink" title="随机链表的复制"></a>随机链表的复制</h2><p>给你一个长度为 <code>n</code> 的链表，每个节点包含一个额外增加的随机指针 <code>random</code> ，该指针可以指向链表中的任何节点或空节点。</p><p>构造这个链表的 <strong><a href="https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin">深拷贝</a><strong>。 深拷贝应该正好由 <code>n</code> 个 <strong>全新</strong> 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 <code>next</code> 指针和 <code>random</code> 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。</strong>复制链表中的指针都不应指向原链表中的节点</strong> 。</p><p>例如，如果原链表中有 <code>X</code> 和 <code>Y</code> 两个节点，其中 <code>X.random --&gt; Y</code> 。那么在复制链表中对应的两个节点 <code>x</code> 和 <code>y</code> ，同样有 <code>x.random --&gt; y</code> 。</p><p>返回复制链表的头节点。</p><p>用一个由 <code>n</code> 个节点组成的链表来表示输入&#x2F;输出中的链表。每个节点用一个 <code>[val, random_index]</code> 表示：</p><ul><li><code>val</code>：一个表示 <code>Node.val</code> 的整数。</li><li><code>random_index</code>：随机指针指向的节点索引（范围从 <code>0</code> 到 <code>n-1</code>）；如果不指向任何节点，则为 <code>null</code> 。</li></ul><p>你的代码 <strong>只</strong> 接受原链表的头节点 <code>head</code> 作为传入参数。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[<span class="hljs-comment">[7,null]</span>,<span class="hljs-comment">[13,0]</span>,<span class="hljs-comment">[11,4]</span>,<span class="hljs-comment">[10,2]</span>,<span class="hljs-comment">[1,0]</span>]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[7,null]</span>,<span class="hljs-comment">[13,0]</span>,<span class="hljs-comment">[11,4]</span>,<span class="hljs-comment">[10,2]</span>,<span class="hljs-comment">[1,0]</span>]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png" alt="img"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：head = <span class="hljs-string">[[1,1],[2,1]]</span><br>输出：<span class="hljs-string">[[1,1],[2,1]]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png" alt="img"></strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：head = <span class="hljs-string">[[3,null],[3,0],[3,null]]</span><br>输出：<span class="hljs-string">[[3,null],[3,0],[3,null]]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>-104 &lt;= Node.val &lt;= 104</code></li><li><code>Node.random</code> 为 <code>null</code> 或指向链表中的节点。</li></ul><p><strong>递归</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.cache = &#123;&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copyRandomList</span>(<span class="hljs-params">self, head: <span class="hljs-string">&#x27;Optional[Node]&#x27;</span></span>) -&gt; <span class="hljs-string">&#x27;Optional[Node]&#x27;</span>:<br>        <span class="hljs-keyword">if</span> head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> head <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.cache:<br>            node = Node(head.val)<br>            self.cache[head] = node<br>            node.<span class="hljs-built_in">next</span> = self.copyRandomList(head.<span class="hljs-built_in">next</span>)<br>            node.random = self.copyRandomList(head.random)<br>        <span class="hljs-keyword">return</span> self.cache[head]<br></code></pre></td></tr></table></figure><p><strong>遍历</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copyRandomList</span>(<span class="hljs-params">self, head: <span class="hljs-string">&#x27;Optional[Node]&#x27;</span></span>) -&gt; <span class="hljs-string">&#x27;Optional[Node]&#x27;</span>:<br>        <span class="hljs-keyword">if</span> head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        cache = &#123;&#125;<br>        <span class="hljs-comment"># 拷贝链表</span><br>        p = head<br>        <span class="hljs-keyword">while</span> p:<br>            node = Node(p.val)<br>            cache[p] = node<br>            p = p.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment"># 连接新链表</span><br>        p = head<br>        <span class="hljs-keyword">while</span> p:<br>            <span class="hljs-keyword">if</span> p.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>: cache[p].<span class="hljs-built_in">next</span> = cache[p.<span class="hljs-built_in">next</span>]<br>            <span class="hljs-keyword">if</span> p.random <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>: cache[p].random = cache[p.random]<br>            p = p.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> cache[head]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单调栈</title>
    <link href="/2024/01/05/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <url>/2024/01/05/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h2 id="队列中可以看到的人数"><a href="#队列中可以看到的人数" class="headerlink" title="队列中可以看到的人数"></a>队列中可以看到的人数</h2><p>有 <code>n</code> 个人排成一个队列，<strong>从左到右</strong> 编号为 <code>0</code> 到 <code>n - 1</code> 。给你以一个整数数组 <code>heights</code> ，每个整数 <strong>互不相同</strong>，<code>heights[i]</code> 表示第 <code>i</code> 个人的高度。</p><p>一个人能 <strong>看到</strong> 他右边另一个人的条件是这两人之间的所有人都比他们两人 <strong>矮</strong> 。更正式的，第 <code>i</code> 个人能看到第 <code>j</code> 个人的条件是 <code>i &lt; j</code> 且 <code>min(heights[i], heights[j]) &gt; max(heights[i+1], heights[i+2], ..., heights[j-1])</code> 。</p><p>请你返回一个长度为 <code>n</code> 的数组 <code>answer</code> ，其中 <code>answer[i]</code> 是第 <code>i</code> 个人在他右侧队列中能 <strong>看到</strong> 的 <strong>人数</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/05/29/queue-plane.jpg" alt="img"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：heights = [10,6,8,5,11,9]<br>输出：[3,1,2,1,1,0]<br>解释：<br>第<span class="hljs-number"> 0 </span>个人能看到编号为<span class="hljs-number"> 1 </span>，2 和<span class="hljs-number"> 4 </span>的人。<br>第<span class="hljs-number"> 1 </span>个人能看到编号为<span class="hljs-number"> 2 </span>的人。<br>第<span class="hljs-number"> 2 </span>个人能看到编号为<span class="hljs-number"> 3 </span>和<span class="hljs-number"> 4 </span>的人。<br>第<span class="hljs-number"> 3 </span>个人能看到编号为<span class="hljs-number"> 4 </span>的人。<br>第<span class="hljs-number"> 4 </span>个人能看到编号为<span class="hljs-number"> 5 </span>的人。<br>第<span class="hljs-number"> 5 </span>个人谁也看不到因为他右边没人。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：heights = <span class="hljs-string">[5,1,2,3,10]</span><br>输出：<span class="hljs-string">[4,1,1,1,0]</span> <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == heights.length</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>1 &lt;= heights[i] &lt;= 105</code></li><li><code>heights</code> 中所有数 <strong>互不相同</strong> 。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canSeePersonsCount</span>(<span class="hljs-params">self, heights: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        stack = []<br>        n = <span class="hljs-built_in">len</span>(heights)<br>        ans = [<span class="hljs-number">0</span>] * n<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            h = heights[i]<br>            <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> h &gt; stack[-<span class="hljs-number">1</span>]:<br>                ans[i] += <span class="hljs-number">1</span><br>                stack.pop()<br>            <span class="hljs-keyword">if</span> stack:<br>                ans[i] += <span class="hljs-number">1</span><br>            stack.append(h)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h2 id="每日温度"><a href="#每日温度" class="headerlink" title="每日温度"></a>每日温度</h2><p>给定一个整数数组 <code>temperatures</code> ，表示每天的温度，返回一个数组 <code>answer</code> ，其中 <code>answer[i]</code> 是指对于第 <code>i</code> 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替。</p><p><strong>示例 1:</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入: temperatures = [<span class="hljs-number">73,74,75,71</span>,<span class="hljs-number">69,72,76,73</span>]<br>输出: [<span class="hljs-number">1,1,4,2</span>,<span class="hljs-number">1,1,0,0</span>]<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入: temperatures = [<span class="hljs-number">30,40,50,60</span>]<br>输出: [<span class="hljs-number">1,1,1,0</span>]<br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: temperatures = <span class="hljs-comment">[30,60,90]</span><br>输出: <span class="hljs-comment">[1,1,0]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= temperatures.length &lt;= 105</code></li><li><code>30 &lt;= temperatures[i] &lt;= 100</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dailyTemperatures</span>(<span class="hljs-params">self, temperatures: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        n = <span class="hljs-built_in">len</span>(temperatures)<br>        stack = []<br>        ans = [<span class="hljs-number">0</span>] * n<br>        <span class="hljs-keyword">for</span> i, temperature <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(temperatures):<br>            <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> temperature &gt; temperatures[stack[-<span class="hljs-number">1</span>]]:<br>                idx = stack.pop()<br>                ans[idx] = i - idx<br>            stack.append(i)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h2 id="下一个更大的元素I"><a href="#下一个更大的元素I" class="headerlink" title="下一个更大的元素I"></a>下一个更大的元素I</h2><p><code>nums1</code> 中数字 <code>x</code> 的 <strong>下一个更大元素</strong> 是指 <code>x</code> 在 <code>nums2</code> 中对应位置 <strong>右侧</strong> 的 <strong>第一个</strong> 比 <code>x</code> 大的元素。</p><p>给你两个 <strong>没有重复元素</strong> 的数组 <code>nums1</code> 和 <code>nums2</code> ，下标从 <strong>0</strong> 开始计数，其中<code>nums1</code> 是 <code>nums2</code> 的子集。</p><p>对于每个 <code>0 &lt;= i &lt; nums1.length</code> ，找出满足 <code>nums1[i] == nums2[j]</code> 的下标 <code>j</code> ，并且在 <code>nums2</code> 确定 <code>nums2[j]</code> 的 <strong>下一个更大元素</strong> 。如果不存在下一个更大元素，那么本次查询的答案是 <code>-1</code> 。</p><p>返回一个长度为 <code>nums1.length</code> 的数组 <code>ans</code> 作为答案，满足 <code>ans[i]</code> 是如上所述的 <strong>下一个更大元素</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：nums1 = [<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], nums2 = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>].<br>输出：[<span class="hljs-number">-1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">-1</span>]<br>解释：nums1 中每个值的下一个更大元素如下所述：<br>- <span class="hljs-number">4</span> ，用加粗斜体标识，nums2 = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>]。不存在下一个更大元素，所以答案是 <span class="hljs-number">-1</span> 。<br>- <span class="hljs-number">1</span> ，用加粗斜体标识，nums2 = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>]。下一个更大元素是 <span class="hljs-number">3</span> 。<br>- <span class="hljs-number">2</span> ，用加粗斜体标识，nums2 = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>]。不存在下一个更大元素，所以答案是 <span class="hljs-number">-1</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：nums1 = [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>], nums2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>].<br>输出：[<span class="hljs-number">3</span>,<span class="hljs-number">-1</span>]<br>解释：nums1 中每个值的下一个更大元素如下所述：<br>- <span class="hljs-number">2</span> ，用加粗斜体标识，nums2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]。下一个更大元素是 <span class="hljs-number">3</span> 。<br>- <span class="hljs-number">4</span> ，用加粗斜体标识，nums2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]。不存在下一个更大元素，所以答案是 <span class="hljs-number">-1</span> 。 <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 104</code></li><li><code>nums1</code>和<code>nums2</code>中所有整数 <strong>互不相同</strong></li><li><code>nums1</code> 中的所有整数同样出现在 <code>nums2</code> 中</li></ul><p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(nums1.length + nums2.length)</code> 的解决方案吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">nextGreaterElement</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        stack = []<br>        n = <span class="hljs-built_in">len</span>(nums2)<br>        dic = &#123;&#125;<br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums2:<br>            <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> num &gt; stack[-<span class="hljs-number">1</span>]:<br>                k = stack.pop()<br>                dic[k] = num<br>            stack.append(num)<br>        <span class="hljs-keyword">return</span> [dic.get(k, -<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> nums1]<br></code></pre></td></tr></table></figure><h2 id="下一个更大的元素II"><a href="#下一个更大的元素II" class="headerlink" title="下一个更大的元素II"></a>下一个更大的元素II</h2><p>给定一个循环数组 <code>nums</code> （ <code>nums[nums.length - 1]</code> 的下一个元素是 <code>nums[0]</code> ），返回 <em><code>nums</code> 中每个元素的 <strong>下一个更大元素</strong></em> 。</p><p>数字 <code>x</code> 的 <strong>下一个更大的元素</strong> 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 <code>-1</code> 。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: nums = [1,2,1]</span><br><span class="hljs-section">输出: [2,-1,2]</span><br><span class="hljs-section">解释: 第一个 1 的下一个更大的数是 2；</span><br>数字 2 找不到下一个更大的数； <br>第二个 1 的下一个最大的数需要循环搜索，结果也是 2。<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入: nums = <span class="hljs-string">[1,2,3,4,3]</span><br>输出: <span class="hljs-string">[2,3,4,-1,4]</span><br></code></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">nextGreaterElements</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        stack = []<br>        ans = [-<span class="hljs-number">1</span>] * n<br>        nums += nums<br>        <span class="hljs-keyword">for</span> i, num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> nums[stack[-<span class="hljs-number">1</span>]] &lt; num:<br>                idx = stack.pop()<br>                <span class="hljs-keyword">if</span> idx &lt; n: ans[idx] = num<br>            stack.append(i)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h2 id="132-模式"><a href="#132-模式" class="headerlink" title="132 模式"></a>132 模式</h2><p>给你一个整数数组 <code>nums</code> ，数组中共有 <code>n</code> 个整数。<strong>132 模式的子序列</strong> 由三个整数 <code>nums[i]</code>、<code>nums[j]</code> 和 <code>nums[k]</code> 组成，并同时满足：<code>i &lt; j &lt; k</code> 和 <code>nums[i] &lt; nums[k] &lt; nums[j]</code> 。</p><p>如果 <code>nums</code> 中存在 <strong>132 模式的子序列</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">nums</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>输出：<span class="hljs-literal">false</span><br>解释：序列中不存在 <span class="hljs-number">132</span> 模式的子序列。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,1,4,2]</span><br>输出：true<br>解释：序列中有 1 个 132 模式的子序列： <span class="hljs-comment">[1, 4, 2]</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[-1,3,2,0]</span><br>输出：true<br>解释：序列中有 3 个 132 模式的的子序列：<span class="hljs-comment">[-1, 3, 2]</span>、<span class="hljs-comment">[-1, 3, 0]</span> 和 <span class="hljs-comment">[-1, 2, 0]</span> 。 <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 2 * 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    def <span class="hljs-title function_">find132pattern</span><span class="hljs-params">(self, nums: List[<span class="hljs-type">int</span>])</span> -&gt; bool:<br>        stack= []<br>        k = -inf<br>        <span class="hljs-keyword">for</span> i in <span class="hljs-title function_">range</span><span class="hljs-params">(len(nums)</span> - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            # nums[i] &lt; nums[k]并且i, k 之间有比nums[k]大的数<br>            <span class="hljs-keyword">if</span> nums[i] &lt; k:<br>                <span class="hljs-keyword">return</span> True<br>            <span class="hljs-keyword">while</span> stack and stack[-<span class="hljs-number">1</span>] &lt; nums[i]:<br>                # 表明i, k 中间有比k大的数<br>                k = max(k, stack.pop())<br>            stack.append(nums[i])<br>        <span class="hljs-keyword">return</span> False<br></code></pre></td></tr></table></figure><h2 id="商品折扣后的最终价格"><a href="#商品折扣后的最终价格" class="headerlink" title="商品折扣后的最终价格"></a>商品折扣后的最终价格</h2><p>给你一个数组 <code>prices</code> ，其中 <code>prices[i]</code> 是商店里第 <code>i</code> 件商品的价格。</p><p>商店里正在进行促销活动，如果你要买第 <code>i</code> 件商品，那么你可以得到与 <code>prices[j]</code> 相等的折扣，其中 <code>j</code> 是满足 <code>j &gt; i</code> 且 <code>prices[j] &lt;= prices[i]</code> 的 <strong>最小下标</strong> ，如果没有满足条件的 <code>j</code> ，你将没有任何折扣。</p><p>请你返回一个数组，数组中第 <code>i</code> 个元素是折扣后你购买商品 <code>i</code> 最终需要支付的价格。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：prices = [8,4,6,2,3]<br>输出：[4,2,4,2,3]<br>解释：<br>商品<span class="hljs-number"> 0 </span>的价格为 price[0]=8 ，你将得到 prices[1]=4 的折扣，所以最终价格为<span class="hljs-number"> 8 </span>-<span class="hljs-number"> 4 </span>=<span class="hljs-number"> 4 </span>。<br>商品<span class="hljs-number"> 1 </span>的价格为 price[1]=4 ，你将得到 prices[3]=2 的折扣，所以最终价格为<span class="hljs-number"> 4 </span>-<span class="hljs-number"> 2 </span>=<span class="hljs-number"> 2 </span>。<br>商品<span class="hljs-number"> 2 </span>的价格为 price[2]=6 ，你将得到 prices[3]=2 的折扣，所以最终价格为<span class="hljs-number"> 6 </span>-<span class="hljs-number"> 2 </span>=<span class="hljs-number"> 4 </span>。<br>商品<span class="hljs-number"> 3 </span>和<span class="hljs-number"> 4 </span>都没有折扣。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：prices = <span class="hljs-string">[1,2,3,4,5]</span><br>输出：<span class="hljs-string">[1,2,3,4,5]</span><br>解释：在这个例子中，所有商品都没有折扣。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：prices = [<span class="hljs-number">10,1,1,6</span>]<br>输出：[<span class="hljs-number">9,0,1,6</span>]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 500</code></li><li><code>1 &lt;= prices[i] &lt;= 10^3</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">finalPrices</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        ans = prices[:]<br>        stack = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(prices) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> prices[i] &lt; stack[-<span class="hljs-number">1</span>]:<br>                stack.pop()<br>            <span class="hljs-keyword">if</span> stack <span class="hljs-keyword">and</span> stack[-<span class="hljs-number">1</span>] &lt;= prices[i]:<br>                ans[i] -= stack[-<span class="hljs-number">1</span>]<br>            stack.append(prices[i])<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单调栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长递增子序列</title>
    <link href="/2024/01/04/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2024/01/04/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度。</p><p><strong>子序列</strong> 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p><p><strong>示例 1：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">10,9,2,5</span>,<span class="hljs-number">3,7,101,18</span>]<br>输出：<span class="hljs-number">4</span><br>解释：最长递增子序列是 [<span class="hljs-number">2,3,7,101</span>]，因此长度为 <span class="hljs-number">4</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[0,1,0,3,2,3]</span><br>输出：<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[7,7,7,7,7,7,7]</span><br>输出：<span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 2500</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><p><strong>进阶：</strong></p><ul><li>你能将算法的时间复杂度降低到 <code>O(n log(n))</code> 吗?</li></ul><h3 id="解法1（动态规划）"><a href="#解法1（动态规划）" class="headerlink" title="解法1（动态规划）"></a>解法1（动态规划）</h3><p>时间复杂度O(n^2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLIS</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        dp = [<span class="hljs-number">1</span>] * n<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>                <span class="hljs-keyword">if</span> nums[j] &lt; nums[i]:<br>                    dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[j] + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp)<br></code></pre></td></tr></table></figure><h3 id="解法2（贪心-二分查找）"><a href="#解法2（贪心-二分查找）" class="headerlink" title="解法2（贪心+二分查找）"></a>解法2（贪心+二分查找）</h3><p>维护一个递增子序列，若新来的num大于序列中最大的，那么就直接加入递增子序列；若新来的num小于序列中最大的，那么就替换掉序列中第一个大于等于num的位置。因为此序列是有序的，所以可以使用二分查找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLIS</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        d = []<br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>            location = bisect_left(d, num)<br>            <span class="hljs-keyword">if</span> location == <span class="hljs-built_in">len</span>(d): d.append(num)<br>            <span class="hljs-keyword">else</span>: d[location] = num<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(d)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制</title>
    <link href="/2024/01/04/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    <url>/2024/01/04/%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="被列覆盖的最行行数"><a href="#被列覆盖的最行行数" class="headerlink" title="被列覆盖的最行行数"></a>被列覆盖的最行行数</h2><p>给你一个下标从 <strong>0</strong> 开始、大小为 <code>m x n</code> 的二进制矩阵 <code>matrix</code> ；另给你一个整数 <code>numSelect</code>，表示你必须从 <code>matrix</code> 中选择的 <strong>不同</strong> 列的数量。</p><p>如果一行中所有的 <code>1</code> 都被你选中的列所覆盖，则认为这一行被 <strong>覆盖</strong> 了。</p><p><strong>形式上</strong>，假设 <code>s = &#123;c1, c2, ...., cnumSelect&#125;</code> 是你选择的列的集合。对于矩阵中的某一行 <code>row</code> ，如果满足下述条件，则认为这一行被集合 <code>s</code> <strong>覆盖</strong>：</p><ul><li>对于满足 <code>matrix[row][col] == 1</code> 的每个单元格 <code>matrix[row][col]</code>（<code>0 &lt;= col &lt;= n - 1</code>），<code>col</code> 均存在于 <code>s</code> 中，或者</li><li><code>row</code> 中 <strong>不存在</strong> 值为 <code>1</code> 的单元格。</li></ul><p>你需要从矩阵中选出 <code>numSelect</code> 个列，使集合覆盖的行数最大化。</p><p>返回一个整数，表示可以由 <code>numSelect</code> 列构成的集合 <strong>覆盖</strong> 的 <strong>最大行数</strong> 。</p><p><strong>示例 1：</strong></p><p><strong><img src="https://assets.leetcode.com/uploads/2022/07/14/rowscovered.png" alt="img"></strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：matrix = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], numSelect = 2<br>输出：3<br>解释：<br>图示中显示了一种覆盖<span class="hljs-number"> 3 </span>行的可行办法。<br>选择 s = &#123;0, 2&#125; 。<br>- 第<span class="hljs-number"> 0 </span>行被覆盖，因为其中没有出现<span class="hljs-number"> 1 </span>。<br>- 第<span class="hljs-number"> 1 </span>行被覆盖，因为值为<span class="hljs-number"> 1 </span>的两列（即<span class="hljs-number"> 0 </span>和 2）均存在于 s 中。<br>- 第<span class="hljs-number"> 2 </span>行未被覆盖，因为 matrix[2][1] ==<span class="hljs-number"> 1 </span>但是<span class="hljs-number"> 1 </span>未存在于 s 中。<br>- 第<span class="hljs-number"> 3 </span>行被覆盖，因为 matrix[2][2] ==<span class="hljs-number"> 1 </span>且<span class="hljs-number"> 2 </span>存在于 s 中。<br>因此，可以覆盖<span class="hljs-number"> 3 </span>行。<br>另外 s = &#123;1, 2&#125; 也可以覆盖<span class="hljs-number"> 3 </span>行，但可以证明无法覆盖更多行。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><strong><img src="https://assets.leetcode.com/uploads/2022/07/14/rowscovered2.png" alt="img"></strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：matrix = <span class="hljs-string">[[1],[0]]</span>, numSelect = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">2</span><br>解释：<br>选择唯一的一列，两行都被覆盖了，因为整个矩阵都被覆盖了。<br>所以我们返回 <span class="hljs-number">2</span> 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[i].length</code></li><li><code>1 &lt;= m, n &lt;= 12</code></li><li><code>matrix[i][j]</code> 要么是 <code>0</code> 要么是 <code>1</code></li><li><code>1 &lt;= numSelect &lt;= n</code></li></ul><p>每一行看做是一个二进制数，把选择numSelect也看做是一个二进制数，若能把改行全覆盖，那么两个二进制相与就等于行二进制数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumRows</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], numSelect: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        m, n = <span class="hljs-built_in">len</span>(matrix), <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br>        mask = [<span class="hljs-built_in">sum</span>(v &lt;&lt; j <span class="hljs-keyword">for</span> j, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(row)) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> matrix]<br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> &lt;&lt; n):<br>            <span class="hljs-keyword">if</span> i.bit_count() == numSelect:<br>                v = <span class="hljs-built_in">sum</span>(m &amp; i == m <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> mask)<br>                ans = <span class="hljs-built_in">max</span>(ans, v)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二进制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双指针</title>
    <link href="/2024/01/03/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <url>/2024/01/03/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h2 id="相向双指针"><a href="#相向双指针" class="headerlink" title="相向双指针"></a>相向双指针</h2><h3 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h3><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。 </p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[-1,0,1,2,-1,-4]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[-1,-1,2]</span>,<span class="hljs-comment">[-1,0,1]</span>]</span><br>解释：<br>nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> + nums<span class="hljs-comment">[2]</span> = (-1) + 0 + 1 = 0 。<br>nums<span class="hljs-comment">[1]</span> + nums<span class="hljs-comment">[2]</span> + nums<span class="hljs-comment">[4]</span> = 0 + 1 + (-1) = 0 。<br>nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[3]</span> + nums<span class="hljs-comment">[4]</span> = (-1) + 2 + (-1) = 0 。<br>不同的三元组是 <span class="hljs-comment">[-1,0,1]</span> 和 <span class="hljs-comment">[-1,-1,2]</span> 。<br>注意，输出的顺序和三元组的顺序并不重要。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[0,1,1]</span><br>输出：<span class="hljs-comment">[]</span><br>解释：唯一可能的三元组和不为 0 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：nums = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>输出：<span class="hljs-string">[[0,0,0]]</span><br>解释：唯一可能的三元组和为 <span class="hljs-number">0</span> 。<br></code></pre></td></tr></table></figure><p><strong>Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">threeSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        nums.sort()<br>        ans = []<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">2</span>):<br>            <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] == nums[i - <span class="hljs-number">1</span>]: <span class="hljs-keyword">continue</span> <span class="hljs-comment"># 避免重复</span><br>            <span class="hljs-keyword">if</span> nums[i] + nums[i + <span class="hljs-number">1</span>] + nums[i + <span class="hljs-number">2</span>] &gt; <span class="hljs-number">0</span>: <span class="hljs-keyword">break</span> <span class="hljs-comment"># 优化</span><br>            <span class="hljs-keyword">if</span> nums[i] + nums[-<span class="hljs-number">1</span>] + nums[-<span class="hljs-number">2</span>] &lt; <span class="hljs-number">0</span>: <span class="hljs-keyword">continue</span> <span class="hljs-comment"># 优化</span><br>            l, r = i + <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> l &lt; r:<br>                s = nums[i] + nums[l] + nums[r] <br>                <span class="hljs-keyword">if</span> s == <span class="hljs-number">0</span>:<br>                    ans.append([nums[i], nums[l], nums[r]])<br>                    l += <span class="hljs-number">1</span><br>                    r -= <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">while</span> l &lt; r <span class="hljs-keyword">and</span> nums[r] == nums[r + <span class="hljs-number">1</span>]: r -= <span class="hljs-number">1</span> <span class="hljs-comment"># 避免重复</span><br>                    <span class="hljs-keyword">while</span> l &lt; r <span class="hljs-keyword">and</span> nums[l] == nums[l - <span class="hljs-number">1</span>]: l += <span class="hljs-number">1</span> <span class="hljs-comment"># 避免重复</span><br>                <span class="hljs-keyword">elif</span> s &gt; <span class="hljs-number">0</span>:<br>                    r -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    l += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h3><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p><p><strong>示例 1：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：nums = [1,0,<span class="hljs-string">-1</span>,0,<span class="hljs-string">-2</span>,2], target = 0<br>输出：[[<span class="hljs-string">-2</span>,<span class="hljs-string">-1</span>,1,2],[<span class="hljs-string">-2</span>,0,0,2],[<span class="hljs-string">-1</span>,0,0,1]]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：nums = [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>], target = <span class="hljs-number">8</span><br>输出：<span class="hljs-string">[[2,2,2,2]]</span> <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fourSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        nums.sort()<br>        ans = []<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] == nums[i - <span class="hljs-number">1</span>]: <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>                <span class="hljs-keyword">if</span> j &gt; i + <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nums[j] == nums[j - <span class="hljs-number">1</span>]: <span class="hljs-keyword">continue</span><br>                l, r = j + <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">while</span> l &lt; r:<br>                    mid = (l + r) // <span class="hljs-number">2</span><br>                    v = nums[i] + nums[j] + nums[l] + nums[r]<br>                    <span class="hljs-keyword">if</span> v == target:<br>                        ans.append([nums[i], nums[j], nums[l], nums[r]])<br>                        l += <span class="hljs-number">1</span><br>                        r -= <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">while</span> l &lt; r <span class="hljs-keyword">and</span> nums[l] == nums[l - <span class="hljs-number">1</span>]: l += <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">while</span> l &lt; r <span class="hljs-keyword">and</span> nums[r] == nums[r + <span class="hljs-number">1</span>]: r -= <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">elif</span> v &gt; target:<br>                        r -= <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">else</span>:<br>                        l += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="接雨水"><a href="#接雨水" class="headerlink" title="接雨水"></a>接雨水</h3><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 </p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" alt="img"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：height = [<span class="hljs-number">0,1,0,2</span>,<span class="hljs-number">1,0,1,3</span>,<span class="hljs-number">2,1,2,1</span>]<br>输出：<span class="hljs-number">6</span><br>解释：上面是由数组 [<span class="hljs-number">0,1,0,2</span>,<span class="hljs-number">1,0,1,3</span>,<span class="hljs-number">2,1,2,1</span>] 表示的高度图，在这种情况下，可以接 <span class="hljs-number">6</span> 个单位的雨水（蓝色部分表示雨水）。 <br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：height = <span class="hljs-string">[4,2,0,3,2,5]</span><br>输出：<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == height.length</code></li><li><code>1 &lt;= n &lt;= 2 * 104</code></li><li><code>0 &lt;= height[i] &lt;= 105</code></li></ul><p>时间复杂度 O(n)  空间复杂度 O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">trap</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(height)<br>        left, right = [<span class="hljs-number">0</span>] * n, [<span class="hljs-number">0</span>] * n<br>        left[<span class="hljs-number">0</span>], right[-<span class="hljs-number">1</span>] = height[<span class="hljs-number">0</span>], height[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>            left[i] = <span class="hljs-built_in">max</span>(left[i - <span class="hljs-number">1</span>], height[i])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            right[i] = <span class="hljs-built_in">max</span>(right[i + <span class="hljs-number">1</span>], height[i])<br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>):<br>            ans += <span class="hljs-built_in">min</span>(left[i], right[i]) - height[i]<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><p>时间复杂度 O(n)  空间复杂度 O(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">trap</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(height)<br>        left, right = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>        pre_max, suf_max = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            pre_max = <span class="hljs-built_in">max</span>(pre_max, height[left])<br>            suf_max = <span class="hljs-built_in">max</span>(suf_max, height[right])<br>            <span class="hljs-keyword">if</span> pre_max &lt; suf_max:<br>                ans += pre_max - height[left]<br>                left += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                ans += suf_max - height[right]<br>                right -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="盛水最多的容器"><a href="#盛水最多的容器" class="headerlink" title="盛水最多的容器"></a>盛水最多的容器</h3><p>相向双指针，计算两指针为两边的结果，然后每次移动指向较短的指针。</p><h2 id="同向双指针（滑动窗口）"><a href="#同向双指针（滑动窗口）" class="headerlink" title="同向双指针（滑动窗口）"></a>同向双指针（滑动窗口）</h2><h3 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h3><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：target = 7, nums = <span class="hljs-comment">[2,3,1,2,4,3]</span><br>输出：2<br>解释：子数组 <span class="hljs-comment">[4,3]</span> 是该条件下的长度最小的子数组。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">输入：<span class="hljs-keyword">target</span> = <span class="hljs-number">4</span>, nums = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>]<br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：target = <span class="hljs-number">11</span>, nums = [<span class="hljs-number">1,1,1,1</span>,<span class="hljs-number">1,1,1,1</span>]<br>输出：<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= target &lt;= 109</code></li><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 105</code></li></ul><p><strong>进阶：</strong></p><ul><li>如果你已经实现 <code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minSubArrayLen</span>(<span class="hljs-params">self, target: <span class="hljs-built_in">int</span>, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-built_in">sum</span> = left = <span class="hljs-number">0</span><br>        ans = inf<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> right <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-built_in">sum</span> += nums[right]<br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">sum</span> &gt;= target:<br>                ans = <span class="hljs-built_in">min</span>(ans, right - left + <span class="hljs-number">1</span>)<br>                <span class="hljs-built_in">sum</span> -= nums[left]<br>                left += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> ans == inf <span class="hljs-keyword">else</span> ans<br></code></pre></td></tr></table></figure><h3 id="乘积小于K的子数组"><a href="#乘积小于K的子数组" class="headerlink" title="乘积小于K的子数组"></a>乘积小于K的子数组</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回子数组内所有元素的乘积严格小于 <code>k</code> 的连续子数组的数目。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[10,5,2,6]</span>, k = 100<br>输出：8<br>解释：8 个乘积小于 100 的子数组分别为：<span class="hljs-comment">[10]</span>、<span class="hljs-comment">[5]</span>、<span class="hljs-comment">[2]</span>,、<span class="hljs-comment">[6]</span>、<span class="hljs-comment">[10,5]</span>、<span class="hljs-comment">[5,2]</span>、<span class="hljs-comment">[2,6]</span>、<span class="hljs-comment">[5,2,6]</span>。<br>需要注意的是 <span class="hljs-comment">[10,5,2]</span> 并不是乘积小于 100 的子数组。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：nums </span>=<span class="hljs-string"> [1,2,3], k = 0</span><br><span class="hljs-string">输出：0 </span><br></code></pre></td></tr></table></figure><p><strong>提示:</strong> </p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>1 &lt;= nums[i] &lt;= 1000</code></li><li><code>0 &lt;= k &lt;= 106</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numSubarrayProductLessThanK</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = left = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> k &lt;= <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        prod = <span class="hljs-number">1</span><br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> right <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            prod *= nums[right]<br>            <span class="hljs-keyword">while</span> prod &gt;= k:<br>                prod /= nums[left]<br>                left += <span class="hljs-number">1</span><br>            ans += (right - left + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;abcabcbb&quot;</span><br><span class="hljs-section">输出: 3 </span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;bbbbb&quot;</span><br><span class="hljs-section">输出: 1</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;pwwkew&quot;</span><br><span class="hljs-section">输出: 3</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br>     请注意，你的答案必须是 子串 的长度，<span class="hljs-string">&quot;pwke&quot;</span> 是一个子序列，不是子串。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        left = ans = <span class="hljs-number">0</span><br>        cnt = Counter()<br>        <span class="hljs-keyword">for</span> right <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n):<br>            cnt[s[right]] += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> cnt[s[right]] &gt; <span class="hljs-number">1</span>:<br>                cnt[s[left]] -= <span class="hljs-number">1</span><br>                left += <span class="hljs-number">1</span><br>            ans = <span class="hljs-built_in">max</span>(ans, right - left + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单词搜索</title>
    <link href="/2024/01/01/%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2/"/>
    <url>/2024/01/01/%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。 </p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg" alt="img"></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：board = [[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>],[<span class="hljs-string">&quot;S&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>],[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>]], word = <span class="hljs-string">&quot;ABCCED&quot;</span><br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg" alt="img"></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：board = [[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>],[<span class="hljs-string">&quot;S&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>],[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>]], word = <span class="hljs-string">&quot;SEE&quot;</span><br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/15/word3.jpg" alt="img"></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：board = [[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>],[<span class="hljs-string">&quot;S&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>],[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>]], word = <span class="hljs-string">&quot;ABCB&quot;</span><br>输出：false <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == board.length</code></li><li><code>n = board[i].length</code></li><li><code>1 &lt;= m, n &lt;= 6</code></li><li><code>1 &lt;= word.length &lt;= 15</code></li><li><code>board</code> 和 <code>word</code> 仅由大小写英文字母组成</li></ul><p><strong>进阶：</strong>你可以使用搜索剪枝的技术来优化解决方案，使其在 <code>board</code> 更大的情况下可以更快解决问题？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">exist</span>(<span class="hljs-params">self, board: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]], word: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        dx = [-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>        dy = [<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>        m, n = <span class="hljs-built_in">len</span>(board), <span class="hljs-built_in">len</span>(board[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">slove</span>(<span class="hljs-params">x, y, z, vis</span>):<br>            <span class="hljs-keyword">if</span> z == <span class="hljs-built_in">len</span>(word): <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            flag = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                xx = x + dx[i]<br>                yy = y + dy[i]<br>                <span class="hljs-keyword">if</span> xx &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> xx &lt; m <span class="hljs-keyword">and</span> yy &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> yy &lt; n <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> vis[xx][yy] <span class="hljs-keyword">and</span> board[xx][yy] == word[z]:<br>                    vis[x][y] = <span class="hljs-literal">True</span><br>                    flag = flag <span class="hljs-keyword">or</span> slove(xx, yy, z + <span class="hljs-number">1</span>, vis.copy())<br>                    vis[x][y] = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">return</span> flag<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                <span class="hljs-keyword">if</span> board[i][j] == word[<span class="hljs-number">0</span>]:<br>                    vis = [[<span class="hljs-literal">False</span>] * n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m) ]<br>                    <span class="hljs-keyword">if</span> slove(i, j, <span class="hljs-number">1</span>, vis): <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K个一组翻转链表</title>
    <link href="/2023/12/31/K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/12/31/K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p><p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg" alt="img"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span>, k = <span class="hljs-number">2</span><br>输出：<span class="hljs-string">[2,1,4,3,5]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg" alt="img"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span>, k = <span class="hljs-number">3</span><br>输出：<span class="hljs-string">[3,2,1,4,5]</span> <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中的节点数目为 <code>n</code></li><li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li><li><code>0 &lt;= Node.val &lt;= 1000</code></li></ul><p><strong>进阶：</strong>你可以设计一个只用 <code>O(1)</code> 额外内存空间的算法解决此问题吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseKGroup</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">head</span>):<br>            <span class="hljs-keyword">if</span> head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">if</span> head.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> head, head<br>            newhead, newtail = reverse(head.<span class="hljs-built_in">next</span>)<br>            newtail.<span class="hljs-built_in">next</span> = head<br>            head.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">return</span> newhead, head<br>        p = head<br>        cnt = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> cnt &lt; k <span class="hljs-keyword">and</span> p:<br>            p = p.<span class="hljs-built_in">next</span><br>            cnt += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> cnt &lt; k <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> p: <span class="hljs-keyword">return</span> head<br>        <span class="hljs-built_in">next</span> = p.<span class="hljs-built_in">next</span><br>        p.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>        <span class="hljs-built_in">next</span> = self.reverseKGroup(<span class="hljs-built_in">next</span>, k)<br>        newhead, newtail = reverse(head)<br>        newtail.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> newhead<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从前序与中序遍历序列构造二叉树</title>
    <link href="/2023/12/31/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/12/31/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>给定两个整数数组 <code>preorder</code> 和 <code>inorder</code> ，其中 <code>preorder</code> 是二叉树的<strong>先序遍历</strong>， <code>inorder</code> 是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点。 </p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt="img"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入: preorder = <span class="hljs-string">[3,9,20,15,7]</span>, inorder = <span class="hljs-string">[9,3,15,20,7]</span><br>输出: <span class="hljs-string">[3,9,20,null,null,15,7]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: preorder = <span class="hljs-comment">[-1]</span>, inorder = <span class="hljs-comment">[-1]</span><br>输出: <span class="hljs-comment">[-1]</span><br></code></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= preorder.length &lt;= 3000</code></li><li><code>inorder.length == preorder.length</code></li><li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li><li><code>preorder</code> 和 <code>inorder</code> 均 <strong>无重复</strong> 元素</li><li><code>inorder</code> 均出现在 <code>preorder</code></li><li><code>preorder</code> <strong>保证</strong> 为二叉树的前序遍历序列</li><li><code>inorder</code> <strong>保证</strong> 为二叉树的中序遍历序列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">buildTree</span>(<span class="hljs-params">self, preorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], inorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">preorder, inorder, l1, r1, l2, r2</span>):<br>            <span class="hljs-keyword">if</span> l1 &gt; r1 <span class="hljs-keyword">or</span> l2 &gt; r2: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            val = preorder[l1]<br>            root = TreeNode(val)<br>            idx = inorder.index(val)<br>            root.left = create(preorder, inorder, l1 + <span class="hljs-number">1</span>, idx + l1 - l2, l2, idx - <span class="hljs-number">1</span>)<br>            root.right = create(preorder, inorder, idx + l1 - l2 + <span class="hljs-number">1</span>, r1, idx + <span class="hljs-number">1</span>, r2)<br>            <span class="hljs-keyword">return</span> root<br>        <br>        <span class="hljs-keyword">return</span> create(preorder, inorder, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(preorder) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(inorder) - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的最近公共祖先</title>
    <link href="/2023/12/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <url>/2023/12/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
    
    <content type="html"><![CDATA[<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="img"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：root = <span class="hljs-selector-attr">[3,5,1,6,2,0,8,null,null,7,4]</span>, <span class="hljs-selector-tag">p</span> = <span class="hljs-number">5</span>, <span class="hljs-selector-tag">q</span> = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">3</span><br>解释：节点 <span class="hljs-number">5</span> 和节点 <span class="hljs-number">1</span> 的最近公共祖先是节点 <span class="hljs-number">3</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="img"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：root = <span class="hljs-selector-attr">[3,5,1,6,2,0,8,null,null,7,4]</span>, <span class="hljs-selector-tag">p</span> = <span class="hljs-number">5</span>, <span class="hljs-selector-tag">q</span> = <span class="hljs-number">4</span><br>输出：<span class="hljs-number">5</span><br>解释：节点 <span class="hljs-number">5</span> 和节点 <span class="hljs-number">4</span> 的最近公共祖先是节点 <span class="hljs-number">5</span> 。因为根据定义最近公共祖先节点可以为节点本身。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：root = <span class="hljs-selector-attr">[1,2]</span>, <span class="hljs-selector-tag">p</span> = <span class="hljs-number">1</span>, <span class="hljs-selector-tag">q</span> = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[2, 105]</code> 内。</li><li><code>-109 &lt;= Node.val &lt;= 109</code></li><li>所有 <code>Node.val</code> <code>互不相同</code> 。</li><li><code>p != q</code></li><li><code>p</code> 和 <code>q</code> 均存在于给定的二叉树中。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lowestCommonAncestor</span>(<span class="hljs-params">self, root: <span class="hljs-string">&#x27;TreeNode&#x27;</span>, p: <span class="hljs-string">&#x27;TreeNode&#x27;</span>, q: <span class="hljs-string">&#x27;TreeNode&#x27;</span></span>) -&gt; <span class="hljs-string">&#x27;TreeNode&#x27;</span>:<br>        self.ans = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">slove</span>(<span class="hljs-params">root, p, q</span>): <span class="hljs-comment"># 查找root中是否有 p 或 q</span><br>            <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            left = slove(root.left, p, q)<br>            right = slove(root.right, p, q)<br><span class="hljs-comment"># left and right 表示在左右子树各找到了 p 或 q</span><br><span class="hljs-comment"># (root == p or root == q) and (left or right) 表示当前节点是p或q，另外一个节点在左或右子树上</span><br>            <span class="hljs-keyword">if</span> (left <span class="hljs-keyword">and</span> right) <span class="hljs-keyword">or</span> ((root == p <span class="hljs-keyword">or</span> root == q) <span class="hljs-keyword">and</span> (left <span class="hljs-keyword">or</span> right)):<br>                self.ans = root<br>            <span class="hljs-keyword">return</span> left <span class="hljs-keyword">or</span> right <span class="hljs-keyword">or</span> root == p <span class="hljs-keyword">or</span> root == q<br>        slove(root, p, q)<br>        <span class="hljs-keyword">return</span> self.ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字典树</title>
    <link href="/2023/12/30/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    <url>/2023/12/30/%E5%AD%97%E5%85%B8%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>**<a href="https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin">Trie</a>**（发音类似 “try”）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p><p>请你实现 Trie 类：</p><ul><li><code>Trie()</code> 初始化前缀树对象。</li><li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li><li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li><li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><p><strong>示例：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">输入<br>[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]<br>[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]<br>输出<br>[<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>]<br><br>解释<br>Trie trie = <span class="hljs-built_in">new</span> Trie();<br>trie.<span class="hljs-keyword">insert</span>(&quot;apple&quot;);<br>trie.<span class="hljs-keyword">search</span>(&quot;apple&quot;);   // 返回 <span class="hljs-keyword">True</span><br>trie.<span class="hljs-keyword">search</span>(&quot;app&quot;);     // 返回 <span class="hljs-keyword">False</span><br>trie.startsWith(&quot;app&quot;); // 返回 <span class="hljs-keyword">True</span><br>trie.<span class="hljs-keyword">insert</span>(&quot;app&quot;);<br>trie.<span class="hljs-keyword">search</span>(&quot;app&quot;);     // 返回 <span class="hljs-keyword">True</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li><li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li><li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 104</code> 次</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.children = [<span class="hljs-literal">None</span>] * <span class="hljs-number">26</span><br>        self.isEnd = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, word: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        node = self<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> word:<br>            cnt = <span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>            <span class="hljs-keyword">if</span> node.children[cnt] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                node.children[cnt] = Trie()<br>            node = node.children[cnt]<br>        node.isEnd = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, word: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        node = self<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> word:<br>            cnt = <span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>            <span class="hljs-keyword">if</span> node.children[cnt] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            node = node.children[cnt]<br>        <span class="hljs-keyword">return</span> node.isEnd<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">startsWith</span>(<span class="hljs-params">self, prefix: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        node = self<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> prefix:<br>            cnt = <span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>            <span class="hljs-keyword">if</span> node.children[cnt] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            node = node.children[cnt]<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字典树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣模版</title>
    <link href="/2023/12/22/%E5%8A%9B%E6%89%A3%E6%A8%A1%E7%89%88/"/>
    <url>/2023/12/22/%E5%8A%9B%E6%89%A3%E6%A8%A1%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h2 id="获取1000000000以内的回文整数"><a href="#获取1000000000以内的回文整数" class="headerlink" title="获取1000000000以内的回文整数"></a>获取1000000000以内的回文整数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 严格按顺序从小到大生成所有回文数</span><br>pal = []<br>base = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> base &lt;= <span class="hljs-number">10000</span>:<br>    <span class="hljs-comment"># 生成奇数长度回文数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(base, base * <span class="hljs-number">10</span>):<br>        x, t = i, i // <span class="hljs-number">10</span><br>        <span class="hljs-keyword">while</span> t:<br>            x = x * <span class="hljs-number">10</span> + t % <span class="hljs-number">10</span><br>            t //= <span class="hljs-number">10</span><br>        pal.append(x)<br>    <span class="hljs-comment"># 生成偶数长度回文数</span><br>    <span class="hljs-keyword">if</span> base &lt;= <span class="hljs-number">1000</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(base, base * <span class="hljs-number">10</span>):<br>            x = t = i<br>            <span class="hljs-keyword">while</span> t:<br>                x = x * <span class="hljs-number">10</span> + t % <span class="hljs-number">10</span><br>                t //= <span class="hljs-number">10</span><br>            pal.append(x)<br>    base *= <span class="hljs-number">10</span><br>pal.append(<span class="hljs-number">1_000_000_001</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python函数</title>
    <link href="/2023/12/22/Python%E5%87%BD%E6%95%B0/"/>
    <url>/2023/12/22/Python%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="bisect-bisect-left-bisect-right"><a href="#bisect-bisect-left-bisect-right" class="headerlink" title="bisect(), bisect_left(), bisect_right()"></a>bisect(), bisect_left(), bisect_right()</h3><p><code>bisect(a, x)</code> 和<code>bisect_right(a, x)</code> 作用一样，都是在有序数组 a 中寻找第一个<strong>大于</strong>x的下标</p><p><code>bisect_left(a, x)</code>的作用是在有序数组 a 中寻找第一个<strong>大于等于</strong> x 的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bisect <span class="hljs-keyword">import</span> bisect, bisect_left, bisect_right<br><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(bisect(a, <span class="hljs-number">4</span>))        <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(bisect_right(a, <span class="hljs-number">4</span>))  <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(bisect_left(a, <span class="hljs-number">4</span>))   <span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(bisect_right(a, <span class="hljs-number">5</span>))  <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(bisect_left(a, <span class="hljs-number">5</span>))   <span class="hljs-comment"># 6</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中EasyExcel的使用</title>
    <link href="/2023/11/06/Java%E4%B8%ADEasyExcel%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/11/06/Java%E4%B8%ADEasyExcel%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>第一步，引入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>  &lt;artifactId&gt;easyexcel&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">3.1</span><span class="hljs-number">.0</span>&lt;/version&gt;<br> &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>第二部，为读操作创建一个监听器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.dream.test;<br><br><span class="hljs-keyword">import</span> com.alibaba.excel.context.AnalysisContext;<br><span class="hljs-keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: cml</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2023/11/6 22:35</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 继承EasyExcel的监听器类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExcelListener</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> List&lt;T&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>  <br>  <span class="hljs-comment">// // 从第二行读取，将每行数据封装到 t 对象中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(T t, AnalysisContext analysisContext)</span> &#123;<br>        data.add(t);<br>    &#125;<br><span class="hljs-comment">// 将数据返回</span><br>    <span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">getData</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>第三步，读写操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.dream.test;<br><br><span class="hljs-keyword">import</span> com.alibaba.excel.EasyExcel;<br><span class="hljs-keyword">import</span> com.dream.spzx.model.vo.product.CategoryExcelVo;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: cml</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2023/11/6 22:34</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EasyExcelTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        read();</span><br>        write();<br>    &#125;<br><br>    <span class="hljs-comment">// 读操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 定义读取excel文件位置</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxx/01.xlsx&quot;</span>;<br>        <span class="hljs-comment">// 调用方法</span><br>        ExcelListener&lt;CategoryExcelVo&gt; excelListener = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelListener</span>();<br>        EasyExcel.read(fileName, CategoryExcelVo.class, excelListener).sheet().doRead();<br>        List&lt;CategoryExcelVo&gt; data = excelListener.getData();<br>        System.out.println(data);<br>    &#125;<br><br>    <span class="hljs-comment">// 写操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">()</span> &#123;<br>        List&lt;CategoryExcelVo&gt; list = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CategoryExcelVo</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;数码办公&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0L</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">CategoryExcelVo</span>(<span class="hljs-number">11L</span>, <span class="hljs-string">&quot;华为手机&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">1L</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxx/02.xlsx&quot;</span>;<br>        EasyExcel.write(fileName, CategoryExcelVo.class).sheet(<span class="hljs-string">&quot;分类数据&quot;</span>).doWrite(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EasyExcel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端知识</title>
    <link href="/2023/10/25/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/10/25/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p>执行 <code>npm install</code> 能够安装package.json中指明的依赖库，将依赖安装到项目目录的node_modules目录中。</p><p>执行前端项目：</p><ul><li><code>npm run dev</code></li><li>在package.json中scripts中指定了各种脚本，在这里就可以用<code>npm start</code>来执行项目。![截屏2023-10-25 15.21.45](..&#x2F;..&#x2F;..&#x2F;..&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-10-25 15.21.45.png)</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LRU缓存</title>
    <link href="/2023/09/19/LRU%E7%BC%93%E5%AD%98/"/>
    <url>/2023/09/19/LRU%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h2 id="LRU缓存"><a href="#LRU缓存" class="headerlink" title="LRU缓存"></a>LRU缓存</h2><p>请你设计并实现一个满足 <a href="https://baike.baidu.com/item/LRU">LRU (最近最少使用) 缓存</a> 约束的数据结构。</p><p>实现 <code>LRUCache</code> 类：</p><ul><li><code>LRUCache(int capacity)</code> 以 <strong>正整数</strong> 作为容量 <code>capacity</code> 初始化 LRU 缓存</li><li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li><li><code>void put(int key, int value)</code> 如果关键字 <code>key</code> 已经存在，则变更其数据值 <code>value</code> ；如果不存在，则向缓存中插入该组 <code>key-value</code> 。如果插入操作导致关键字数量超过 <code>capacity</code> ，则应该 <strong>逐出</strong> 最久未使用的关键字。</li></ul><p>函数 <code>get</code> 和 <code>put</code> 必须以 <code>O(1)</code> 的平均时间复杂度运行。</p><p><strong>示例：</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs haxe">输入<br>[<span class="hljs-string">&quot;LRUCache&quot;</span>, <span class="hljs-string">&quot;put&quot;</span>, <span class="hljs-string">&quot;put&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;put&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;put&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>]<br>[[<span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">2</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">1</span>], [<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>]]<br>输出<br>[<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">-1</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>解释<br>LRUCache lRUCache = <span class="hljs-keyword">new</span> <span class="hljs-type">LRUCache</span>(<span class="hljs-number">2</span>);<br>lRUCache.put(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 缓存是 &#123;1=1&#125;</span><br>lRUCache.put(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 缓存是 &#123;1=1, 2=2&#125;</span><br>lRUCache.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>);    <span class="hljs-comment">// 返回 1</span><br>lRUCache.put(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;</span><br>lRUCache.<span class="hljs-keyword">get</span>(<span class="hljs-number">2</span>);    <span class="hljs-comment">// 返回 -1 (未找到)</span><br>lRUCache.put(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;</span><br>lRUCache.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>);    <span class="hljs-comment">// 返回 -1 (未找到)</span><br>lRUCache.<span class="hljs-keyword">get</span>(<span class="hljs-number">3</span>);    <span class="hljs-comment">// 返回 3</span><br>lRUCache.<span class="hljs-keyword">get</span>(<span class="hljs-number">4</span>);    <span class="hljs-comment">// 返回 4</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= capacity &lt;= 3000</code></li><li><code>0 &lt;= key &lt;= 10000</code></li><li><code>0 &lt;= value &lt;= 105</code></li><li>最多调用 <code>2 * 105</code> 次 <code>get</code> 和 <code>put</code></li></ul><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DLinkNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key=<span class="hljs-number">0</span>, value=<span class="hljs-number">0</span></span>):<br>        self.key = key<br>        self.value =value<br>        self.prev = <span class="hljs-literal">None</span><br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, capacity: <span class="hljs-built_in">int</span></span>):<br>        self.cache = &#123;&#125;<br><br>        <span class="hljs-comment"># 伪头尾节点</span><br>        self.head = DLinkNode()<br>        self.tail = DLinkNode()<br>        self.head.<span class="hljs-built_in">next</span> = self.tail<br>        self.tail.prev = self.head<br>        self.capacity = capacity<br>        self.size = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.cache:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <br>        <span class="hljs-comment"># key存在</span><br>        node = self.cache[key]<br>        self.moveToHead(node)<br>        <span class="hljs-keyword">return</span> node.value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">int</span>, value: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.cache:<br>            node = DLinkNode(key, value)<br>            self.cache[key] = node<br><br>            self.addToHead(node)<br>            self.size += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> self.size &gt; self.capacity:<br>                removed = self.removeTail()<br>                self.cache.pop(removed.key)<br>                self.size -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            node = self.cache[key]<br>            node.value = value<br>            self.moveToHead(node)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addToHead</span>(<span class="hljs-params">self, node</span>):<br>        oddhead = self.head.<span class="hljs-built_in">next</span><br><br>        self.head.<span class="hljs-built_in">next</span> = node<br>        node.prev = self.head<br>        node.<span class="hljs-built_in">next</span> = oddhead<br>        oddhead.prev = node<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeNode</span>(<span class="hljs-params">self, node</span>):<br>        node.prev.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span><br>        node.<span class="hljs-built_in">next</span>.prev = node.prev<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">moveToHead</span>(<span class="hljs-params">self, node</span>):<br>        self.removeNode(node)<br>        self.addToHead(node)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeTail</span>(<span class="hljs-params">self</span>):<br>        node = self.tail.prev<br>        self.removeNode(node)<br>        <span class="hljs-keyword">return</span> node<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DLinkedNode</span> &#123;<br>    <span class="hljs-type">int</span> key, value;<br>    DLinkedNode* prev;<br>    DLinkedNode* next;<br>    <span class="hljs-built_in">DLinkedNode</span>(): <span class="hljs-built_in">key</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">value</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">prev</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">DLinkedNode</span>(<span class="hljs-type">int</span> _key, <span class="hljs-type">int</span> _value): <span class="hljs-built_in">key</span>(_key), <span class="hljs-built_in">value</span>(_value), <span class="hljs-built_in">prev</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    unordered_map&lt;<span class="hljs-type">int</span>, DLinkedNode*&gt; cache;<br>    DLinkedNode* head;<br>    DLinkedNode* tail;<br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-type">int</span> capacity;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LRUCache</span>(<span class="hljs-type">int</span> _capacity): <span class="hljs-built_in">capacity</span>(_capacity), <span class="hljs-built_in">size</span>(<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 使用伪头部和伪尾部节点</span><br>        head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DLinkedNode</span>();<br>        tail = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DLinkedNode</span>();<br>        head-&gt;next = tail;<br>        tail-&gt;prev = head;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!cache.<span class="hljs-built_in">count</span>(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果 key 存在，先通过哈希表定位，再移到头部</span><br>        DLinkedNode* node = cache[key];<br>        <span class="hljs-built_in">moveToHead</span>(node);<br>        <span class="hljs-keyword">return</span> node-&gt;value;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!cache.<span class="hljs-built_in">count</span>(key)) &#123;<br>            <span class="hljs-comment">// 如果 key 不存在，创建一个新的节点</span><br>            DLinkedNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DLinkedNode</span>(key, value);<br>            <span class="hljs-comment">// 添加进哈希表</span><br>            cache[key] = node;<br>            <span class="hljs-comment">// 添加至双向链表的头部</span><br>            <span class="hljs-built_in">addToHead</span>(node);<br>            ++size;<br>            <span class="hljs-keyword">if</span> (size &gt; capacity) &#123;<br>                <span class="hljs-comment">// 如果超出容量，删除双向链表的尾部节点</span><br>                DLinkedNode* removed = <span class="hljs-built_in">removeTail</span>();<br>                <span class="hljs-comment">// 删除哈希表中对应的项</span><br>                cache.<span class="hljs-built_in">erase</span>(removed-&gt;key);<br>                <span class="hljs-comment">// 防止内存泄漏</span><br>                <span class="hljs-keyword">delete</span> removed;<br>                --size;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部</span><br>            DLinkedNode* node = cache[key];<br>            node-&gt;value = value;<br>            <span class="hljs-built_in">moveToHead</span>(node);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addToHead</span><span class="hljs-params">(DLinkedNode* node)</span> </span>&#123;<br>        node-&gt;prev = head;<br>        node-&gt;next = head-&gt;next;<br>        head-&gt;next-&gt;prev = node;<br>        head-&gt;next = node;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeNode</span><span class="hljs-params">(DLinkedNode* node)</span> </span>&#123;<br>        node-&gt;prev-&gt;next = node-&gt;next;<br>        node-&gt;next-&gt;prev = node-&gt;prev;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">moveToHead</span><span class="hljs-params">(DLinkedNode* node)</span> </span>&#123;<br>        <span class="hljs-built_in">removeNode</span>(node);<br>        <span class="hljs-built_in">addToHead</span>(node);<br>    &#125;<br><br>    <span class="hljs-function">DLinkedNode* <span class="hljs-title">removeTail</span><span class="hljs-params">()</span> </span>&#123;<br>        DLinkedNode* node = tail-&gt;prev;<br>        <span class="hljs-built_in">removeNode</span>(node);<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LRU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>换根dp</title>
    <link href="/2023/09/18/%E6%8D%A2%E6%A0%B9dp/"/>
    <url>/2023/09/18/%E6%8D%A2%E6%A0%B9dp/</url>
    
    <content type="html"><![CDATA[<h2 id="树中距离之和"><a href="#树中距离之和" class="headerlink" title="树中距离之和"></a>树中距离之和</h2><p>给定一个无向、连通的树。树中有 <code>n</code> 个标记为 <code>0...n-1</code> 的节点以及 <code>n-1</code> 条边 。</p><p>给定整数 <code>n</code> 和数组 <code>edges</code> ， <code>edges[i] = [ai, bi]</code>表示树中的节点 <code>ai</code> 和 <code>bi</code> 之间有一条边。</p><p>返回长度为 <code>n</code> 的数组 <code>answer</code> ，其中 <code>answer[i]</code> 是树中第 <code>i</code> 个节点与所有其他节点之间的距离之和。 </p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist1.jpg" alt="img"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入: n = <span class="hljs-number">6</span>, edges = <span class="hljs-selector-attr">[[0,1]</span>,<span class="hljs-selector-attr">[0,2]</span>,<span class="hljs-selector-attr">[2,3]</span>,<span class="hljs-selector-attr">[2,4]</span>,<span class="hljs-selector-attr">[2,5]</span>]<br>输出: <span class="hljs-selector-attr">[8,12,6,10,10,10]</span><br>解释: 树如图所示。<br>我们可以计算出 <span class="hljs-built_in">dist</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) + <span class="hljs-built_in">dist</span>(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) + <span class="hljs-built_in">dist</span>(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>) + <span class="hljs-built_in">dist</span>(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>) + <span class="hljs-built_in">dist</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>) <br>也就是 <span class="hljs-number">1</span> + <span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-number">2</span> + <span class="hljs-number">2</span> = <span class="hljs-number">8</span>。 因此，answer<span class="hljs-selector-attr">[0]</span> = <span class="hljs-number">8</span>，以此类推。<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist2.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: n = 1, edges = <span class="hljs-comment">[]</span><br>输出: <span class="hljs-comment">[0]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist3.jpg" alt="img"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入: n = <span class="hljs-number">2</span>, edges = <span class="hljs-string">[[1,0]]</span><br>输出: [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>] <br></code></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= n &lt;= 3 * 104</code></li><li><code>edges.length == n - 1</code></li><li><code>edges[i].length == 2</code></li><li><code>0 &lt;= ai, bi &lt; n</code></li><li><code>ai != bi</code></li><li>给定的输入保证为有效的树</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sumOfDistancesInTree</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, edges: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        g = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> edges:<br>            g[x].append(y)<br>            g[y].append(x)<br>        <br>        size = [<span class="hljs-number">1</span>] * n<br>        ans = [<span class="hljs-number">0</span>] * n<br>        <br>        <span class="hljs-comment"># 计算每个子树的节点大小</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">x, father, depth</span>):<br>            ans[<span class="hljs-number">0</span>] += depth<br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> g[x]:<br>                <span class="hljs-keyword">if</span> y != father:<br>                    dfs(y, x, depth + <span class="hljs-number">1</span>)<br>                    size[x] += size[y]<br>        <br>        dfs(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br><br>        <span class="hljs-comment"># 每次移动，会远离一部分节点（n - size[y]），靠近另一部分节点（size[y]）</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">reroot</span>(<span class="hljs-params">x, father</span>):<br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> g[x]:<br>                <span class="hljs-keyword">if</span> y != father:<br>                    ans[y] = ans[x] + (n - size[y]) - size[y]<br>                    reroot(y, x)<br>        <br>        reroot(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h2 id="可以到达每一个节点的最少边反转次数"><a href="#可以到达每一个节点的最少边反转次数" class="headerlink" title="可以到达每一个节点的最少边反转次数"></a>可以到达每一个节点的最少边反转次数</h2><p>给你一个 <code>n</code> 个点的 <strong>简单有向图</strong> （没有重复边的有向图），节点编号为 <code>0</code> 到 <code>n - 1</code> 。如果这些边是双向边，那么这个图形成一棵 <strong>树</strong> 。</p><p>给你一个整数 <code>n</code> 和一个 <strong>二维</strong> 整数数组 <code>edges</code> ，其中 <code>edges[i] = [ui, vi]</code> 表示从节点 <code>ui</code> 到节点 <code>vi</code> 有一条 <strong>有向边</strong> 。</p><p><strong>边反转</strong> 指的是将一条边的方向反转，也就是说一条从节点 <code>ui</code> 到节点 <code>vi</code> 的边会变为一条从节点 <code>vi</code> 到节点 <code>ui</code> 的边。</p><p>对于范围 <code>[0, n - 1]</code> 中的每一个节点 <code>i</code> ，你的任务是分别 <strong>独立</strong> 计算 <strong>最少</strong> 需要多少次 <strong>边反转</strong> ，从节点 <code>i</code> 出发经过 <strong>一系列有向边</strong> ，可以到达所有的节点。</p><p>请你返回一个长度为 <code>n</code> 的整数数组 <code>answer</code> ，其中 <code>answer[i]</code>表示从节点 <code>i</code> 出发，可以到达所有节点的 <strong>最少边反转</strong> 次数。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2023/08/26/image-20230826221104-3.png" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：n = 4, edges = <span class="hljs-comment">[<span class="hljs-comment">[2,0]</span>,<span class="hljs-comment">[2,1]</span>,<span class="hljs-comment">[1,3]</span>]</span><br>输出：<span class="hljs-comment">[1,1,0,2]</span><br>解释：上图表示了与输入对应的简单有向图。<br>对于节点 0 ：反转 <span class="hljs-comment">[2,0]</span> ，从节点 0 出发可以到达所有节点。<br>所以 answer<span class="hljs-comment">[0]</span> = 1 。<br>对于节点 1 ：反转 <span class="hljs-comment">[2,1]</span> ，从节点 1 出发可以到达所有节点。<br>所以 answer<span class="hljs-comment">[1]</span> = 1 。<br>对于节点 2 ：不需要反转就可以从节点 2 出发到达所有节点。<br>所以 answer<span class="hljs-comment">[2]</span> = 0 。<br>对于节点 3 ：反转 <span class="hljs-comment">[1,3]</span> 和 <span class="hljs-comment">[2,1]</span> ，从节点 3 出发可以到达所有节点。<br>所以 answer<span class="hljs-comment">[3]</span> = 2 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2023/08/26/image-20230826225541-2.png" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：n = 3, edges = <span class="hljs-comment">[<span class="hljs-comment">[1,2]</span>,<span class="hljs-comment">[2,0]</span>]</span><br>输出：<span class="hljs-comment">[2,0,1]</span><br>解释：上图表示了与输入对应的简单有向图。<br>对于节点 0 ：反转 <span class="hljs-comment">[2,0]</span> 和 <span class="hljs-comment">[1,2]</span> ，从节点 0 出发可以到达所有节点。<br>所以 answer<span class="hljs-comment">[0]</span> = 2 。<br>对于节点 1 ：不需要反转就可以从节点 2 出发到达所有节点。<br>所以 answer<span class="hljs-comment">[1]</span> = 0 。<br>对于节点 2 ：反转 <span class="hljs-comment">[1,2]</span> ，从节点 2 出发可以到达所有节点。<br>所以 answer<span class="hljs-comment">[2]</span> = 1 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= n &lt;= 105</code></li><li><code>edges.length == n - 1</code></li><li><code>edges[i].length == 2</code></li><li><code>0 &lt;= ui == edges[i][0] &lt; n</code></li><li><code>0 &lt;= vi == edges[i][1] &lt; n</code></li><li><code>ui != vi</code></li><li>输入保证如果边是双向边，可以得到一棵树。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minEdgeReversals</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, edges: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        g = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> edges:<br>            g[x].append((y, <span class="hljs-number">1</span>))<br>            g[y].append((x, -<span class="hljs-number">1</span>))<br>        <br>        ans = [<span class="hljs-number">0</span>] * n<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">x, father</span>):<br>            <span class="hljs-keyword">for</span> y, <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> g[x]:<br>                <span class="hljs-keyword">if</span> y != father:<br>                    ans[<span class="hljs-number">0</span>] += <span class="hljs-built_in">int</span>(<span class="hljs-built_in">dir</span> &lt; <span class="hljs-number">0</span>)<br>                    dfs(y, x)<br>        dfs(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">reroot</span>(<span class="hljs-params">x, father</span>):<br>            <span class="hljs-keyword">for</span> y, <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> g[x]:<br>                <span class="hljs-keyword">if</span> y != father:<br>                    ans[y] = ans[x] + <span class="hljs-built_in">dir</span><br>                    reroot(y, x)<br>        reroot(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>换根dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2023/09/17/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/09/17/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h1><h2 id="bisect-left"><a href="#bisect-left" class="headerlink" title="bisect_left"></a>bisect_left</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bisect_left</span>(<span class="hljs-params">nums, target</span>):<br>    left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>    ans = <span class="hljs-built_in">len</span>(nums)<br>    <span class="hljs-keyword">while</span> left &lt;= right:<br>        mid = (left + right) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> nums[mid] &gt;= target:<br>            ans = mid<br>            right = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            left = mid + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h2 id="bisect-right"><a href="#bisect-right" class="headerlink" title="bisect_right"></a>bisect_right</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bisect_right</span>(<span class="hljs-params">nums, target</span>):<br>    left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>    ans = <span class="hljs-built_in">len</span>(nums)<br>    <span class="hljs-keyword">while</span> left &lt;= right:<br>        mid = (left + right) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> nums[mid] &gt; target:<br>            ans = mid<br>            right = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            left = mid + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h2 id="寻找峰值"><a href="#寻找峰值" class="headerlink" title="寻找峰值"></a>寻找峰值</h2><p>峰值元素是指其值严格大于左右相邻值的元素。</p><p>给你一个整数数组 <code>nums</code>，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 <strong>任何一个峰值</strong> 所在位置即可。</p><p>你可以假设 <code>nums[-1] = nums[n] = -∞</code> 。</p><p>你必须实现时间复杂度为 <code>O(log n)</code> 的算法来解决此问题。 </p><p><strong>示例 1：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">1,2,3,1</span>]<br>输出：<span class="hljs-number">2</span><br>解释：<span class="hljs-number">3</span> 是峰值元素，你的函数应该返回其索引 <span class="hljs-number">2</span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[1,2,1,3,5,6,4]</span><br>输出：<span class="hljs-number">1</span> 或 <span class="hljs-number">5</span> <br>解释：你的函数可以返回索引 <span class="hljs-number">1</span>，其峰值元素为 <span class="hljs-number">2</span>；<br>     或者返回索引 <span class="hljs-number">5</span>， 其峰值元素为 <span class="hljs-number">6</span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li><li>对于所有有效的 <code>i</code> 都有 <code>nums[i] != nums[i + 1]</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findPeakElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        l, r = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> l &lt; r:<br>            m = (l + r) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[m] &lt; nums[m + <span class="hljs-number">1</span>]:<br>                l = m + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                r = m<br>        <span class="hljs-keyword">return</span> l<br></code></pre></td></tr></table></figure><h2 id="搜索旋转排序数组"><a href="#搜索旋转排序数组" class="headerlink" title="搜索旋转排序数组"></a>搜索旋转排序数组</h2><p>整数数组 <code>nums</code> 按升序排列，数组中的值 <strong>互不相同</strong> 。</p><p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 <strong>旋转</strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7]</code> 在下标 <code>3</code> 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。</p><p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回它的下标，否则返回 <code>-1</code> 。</p><p>你必须设计一个时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[4,5,6,7,0,1,2]</span>, target = <span class="hljs-number">0</span><br>输出：<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[4,5,6,7,0,1,2]</span>, target = <span class="hljs-number">3</span><br>输出：-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">输入：nums = [<span class="hljs-number">1</span>], <span class="hljs-keyword">target</span> = <span class="hljs-number">0</span><br>输出：<span class="hljs-number">-1</span> <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5000</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 中的每个值都 <strong>独一无二</strong></li><li>题目数据保证 <code>nums</code> 在预先未知的某个下标上进行了旋转</li><li><code>-104 &lt;= target &lt;= 104</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        l, r = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> l &lt;= r:<br>            m = (l + r) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[m] == target:<br>                <span class="hljs-keyword">return</span> m<br>            <span class="hljs-keyword">if</span> nums[l] &lt;= nums[m]: <span class="hljs-comment"># 左边上递增的</span><br>                <span class="hljs-keyword">if</span> nums[l] &lt;= target &lt; nums[m]: r = m - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>: l = m + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 右边上递增有序的</span><br>                <span class="hljs-keyword">if</span> nums[m] &lt; target &lt;= nums[r]: l = m + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>: r = m - <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="寻找旋转排序数组中的最小值"><a href="#寻找旋转排序数组中的最小值" class="headerlink" title="寻找旋转排序数组中的最小值"></a>寻找旋转排序数组中的最小值</h2><p>已知一个长度为 <code>n</code> 的数组，预先按照升序排列，经由 <code>1</code> 到 <code>n</code> 次 <strong>旋转</strong> 后，得到输入数组。例如，原数组 <code>nums = [0,1,2,4,5,6,7]</code> 在变化后可能得到：</p><ul><li>若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,2]</code></li><li>若旋转 <code>7</code> 次，则可以得到 <code>[0,1,2,4,5,6,7]</code></li></ul><p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> <strong>旋转一次</strong> 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p><p>给你一个元素值 <strong>互不相同</strong> 的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 <strong>最小元素</strong> 。</p><p>你必须设计一个时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[3,4,5,1,2]</span><br>输出：<span class="hljs-number">1</span><br>解释：原数组为 <span class="hljs-string">[1,2,3,4,5]</span> ，旋转 <span class="hljs-number">3</span> 次得到输入数组。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[4,5,6,7,0,1,2]</span><br>输出：<span class="hljs-number">0</span><br>解释：原数组为 <span class="hljs-string">[0,1,2,4,5,6,7]</span> ，旋转 <span class="hljs-number">4</span> 次得到输入数组。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[11,13,15,17]</span><br>输出：<span class="hljs-number">11</span><br>解释：原数组为 <span class="hljs-string">[11,13,15,17]</span> ，旋转 <span class="hljs-number">4</span> 次得到输入数组。 <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5000</code></li><li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li><li><code>nums</code> 原来是一个升序排序的数组，并进行了 <code>1</code> 至 <code>n</code> 次旋转</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMin</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        l, r = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> l &lt; r:<br>            m = (l + r) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[m] &lt; nums[r]:<br>                r = m<br>            <span class="hljs-keyword">else</span>:<br>                l = m + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> nums[l]<br></code></pre></td></tr></table></figure><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="制作m束花所需的最小天数"><a href="#制作m束花所需的最小天数" class="headerlink" title="制作m束花所需的最小天数"></a>制作m束花所需的最小天数</h2><p>给你一个整数数组 <code>bloomDay</code>，以及两个整数 <code>m</code> 和 <code>k</code> 。</p><p>现需要制作 <code>m</code> 束花。制作花束时，需要使用花园中 <strong>相邻的 <code>k</code> 朵花</strong> 。</p><p>花园中有 <code>n</code> 朵花，第 <code>i</code> 朵花会在 <code>bloomDay[i]</code> 时盛开，<strong>恰好</strong> 可以用于 <strong>一束</strong> 花中。</p><p>请你返回从花园中摘 <code>m</code> 束花需要等待的最少的天数。如果不能摘到 <code>m</code> 束花则返回 <strong>-1</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe">输入：bloomDay = [<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>], m = <span class="hljs-number">3</span>, k = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">3</span><br>解释：让我们一起观察这三天的花开过程，x 表示花开，而 <span class="hljs-literal">_</span> 表示花还未开。<br>现在需要制作 <span class="hljs-number">3</span> 束花，每束只需要 <span class="hljs-number">1</span> 朵。<br><span class="hljs-number">1</span> 天后：[x, <span class="hljs-literal">_</span>, <span class="hljs-literal">_</span>, <span class="hljs-literal">_</span>, <span class="hljs-literal">_</span>]   <span class="hljs-comment">// 只能制作 1 束花</span><br><span class="hljs-number">2</span> 天后：[x, <span class="hljs-literal">_</span>, <span class="hljs-literal">_</span>, <span class="hljs-literal">_</span>, x]   <span class="hljs-comment">// 只能制作 2 束花</span><br><span class="hljs-number">3</span> 天后：[x, <span class="hljs-literal">_</span>, x, <span class="hljs-literal">_</span>, x]   <span class="hljs-comment">// 可以制作 3 束花，答案为 3</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：bloomDay = [1,10,3,10,2], m = 3, k = 2<br>输出：-1<br>解释：要制作<span class="hljs-number"> 3 </span>束花，每束需要<span class="hljs-number"> 2 </span>朵花，也就是一共需要<span class="hljs-number"> 6 </span>朵花。而花园中只有<span class="hljs-number"> 5 </span>朵花，无法满足制作要求，返回 -1 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">输入：bloomDay <span class="hljs-operator">=</span> [<span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">12</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span>]<span class="hljs-punctuation">,</span> m <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> k <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>输出：<span class="hljs-number">12</span><br>解释：要制作 <span class="hljs-number">2</span> 束花，每束需要 <span class="hljs-number">3</span> 朵。<br>花园在 <span class="hljs-number">7</span> 天后和 <span class="hljs-number">12</span> 天后的情况如下：<br><span class="hljs-number">7</span> 天后：[<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> _<span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>]<br>可以用前 <span class="hljs-number">3</span> 朵盛开的花制作第一束花。但不能使用后 <span class="hljs-number">3</span> 朵盛开的花，因为它们不相邻。<br><span class="hljs-number">12</span> 天后：[<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>]<br>显然，我们可以用不同的方式制作两束花。<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：bloomDay = [<span class="hljs-number">1000000000</span>,<span class="hljs-number">1000000000</span>], m = <span class="hljs-number">1</span>, k = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">1000000000</span><br>解释：需要等 <span class="hljs-number">1000000000</span> 天才能采到花来制作花束<br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：bloomDay = [<span class="hljs-number">1,10,2,9</span>,<span class="hljs-number">3,8,4,7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], m = <span class="hljs-number">4</span>, k = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>bloomDay.length == n</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= bloomDay[i] &lt;= 10^9</code></li><li><code>1 &lt;= m &lt;= 10^6</code></li><li><code>1 &lt;= k &lt;= n</code></li></ul><p><strong>题解：</strong></p><p>二分查找需要具有单调性，而该题要求制作m束花所需的最小天数。已知当天数越多，越有可能制作m束花，所以所需天数具有单调性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minDays</span>(<span class="hljs-params">self, bloomDay: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], m: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">judge</span>(<span class="hljs-params">mid</span>): <span class="hljs-comment"># 判断第mid天是否符合条件</span><br>            res, cnt = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> bloomDay:<br>                <span class="hljs-keyword">if</span> x &gt; mid:<br>                    cnt = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">else</span>:<br>                    cnt += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> cnt == k:<br>                        res += <span class="hljs-number">1</span><br>                        cnt = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> res &gt;= m<br><br>        n = <span class="hljs-built_in">len</span>(bloomDay)<br>        <span class="hljs-keyword">if</span> m * k &gt; n: <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        l, r = <span class="hljs-number">1</span>, <span class="hljs-built_in">max</span>(bloomDay)<br>        ans = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> l &lt;= r:<br>            mid = (l + r) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> judge(mid):<br>                ans = mid<br>                r = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                l = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h2 id="最大合金数"><a href="#最大合金数" class="headerlink" title="最大合金数"></a>最大合金数</h2><p>假设你是一家合金制造公司的老板，你的公司使用多种金属来制造合金。现在共有 <code>n</code> 种不同类型的金属可以使用，并且你可以使用 <code>k</code> 台机器来制造合金。每台机器都需要特定数量的每种金属来创建合金。</p><p>对于第 <code>i</code> 台机器而言，创建合金需要 <code>composition[i][j]</code> 份 <code>j</code> 类型金属。最初，你拥有 <code>stock[i]</code> 份 <code>i</code> 类型金属，而每购入一份 <code>i</code> 类型金属需要花费 <code>cost[i]</code> 的金钱。</p><p>给你整数 <code>n</code>、<code>k</code>、<code>budget</code>，下标从 <strong>1</strong> 开始的二维数组 <code>composition</code>，两个下标从 <strong>1</strong> 开始的数组 <code>stock</code> 和 <code>cost</code>，请你在预算不超过 <code>budget</code> 金钱的前提下，<strong>最大化</strong> 公司制造合金的数量。</p><p><strong>所有合金都需要由同一台机器制造。</strong></p><p>返回公司可以制造的最大合金数。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3]<br>输出：2<br>解释：最优的方法是使用第<span class="hljs-number"> 1 </span>台机器来制造合金。<br>要想制造<span class="hljs-number"> 2 </span>份合金，我们需要购买：<br>-<span class="hljs-number"> 2 </span>份第<span class="hljs-number"> 1 </span>类金属。<br>-<span class="hljs-number"> 2 </span>份第<span class="hljs-number"> 2 </span>类金属。<br>-<span class="hljs-number"> 2 </span>份第<span class="hljs-number"> 3 </span>类金属。<br>总共需要<span class="hljs-number"> 2 </span>*<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 2 </span>*<span class="hljs-number"> 2 </span>+<span class="hljs-number"> 2 </span>*<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 12 </span>的金钱，小于等于预算<span class="hljs-number"> 15 </span>。<br>注意，我们最开始时候没有任何一类金属，所以必须买齐所有需要的金属。<br>可以证明在示例条件下最多可以制造<span class="hljs-number"> 2 </span>份合金。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3]<br>输出：5<br>解释：最优的方法是使用第<span class="hljs-number"> 2 </span>台机器来制造合金。 <br>要想制造<span class="hljs-number"> 5 </span>份合金，我们需要购买： <br>-<span class="hljs-number"> 5 </span>份第<span class="hljs-number"> 1 </span>类金属。<br>-<span class="hljs-number"> 5 </span>份第<span class="hljs-number"> 2 </span>类金属。 <br>-<span class="hljs-number"> 0 </span>份第<span class="hljs-number"> 3 </span>类金属。 <br>总共需要<span class="hljs-number"> 5 </span>*<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 5 </span>*<span class="hljs-number"> 2 </span>+<span class="hljs-number"> 0 </span>*<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 15 </span>的金钱，小于等于预算<span class="hljs-number"> 15 </span>。 <br>可以证明在示例条件下最多可以制造<span class="hljs-number"> 5 </span>份合金。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 2, k = 3, budget = 10, composition = [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5]<br>输出：2<br>解释：最优的方法是使用第<span class="hljs-number"> 3 </span>台机器来制造合金。<br>要想制造<span class="hljs-number"> 2 </span>份合金，我们需要购买：<br>-<span class="hljs-number"> 1 </span>份第<span class="hljs-number"> 1 </span>类金属。<br>-<span class="hljs-number"> 1 </span>份第<span class="hljs-number"> 2 </span>类金属。<br>总共需要<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 5 </span>+<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 5 </span>=<span class="hljs-number"> 10 </span>的金钱，小于等于预算<span class="hljs-number"> 10 </span>。<br>可以证明在示例条件下最多可以制造<span class="hljs-number"> 2 </span>份合金。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n, k &lt;= 100</code></li><li><code>0 &lt;= budget &lt;= 108</code></li><li><code>composition.length == k</code></li><li><code>composition[i].length == n</code></li><li><code>1 &lt;= composition[i][j] &lt;= 100</code></li><li><code>stock.length == cost.length == n</code></li><li><code>0 &lt;= stock[i] &lt;= 108</code></li><li><code>1 &lt;= cost[i] &lt;= 100</code></li></ul><p><strong>题解：</strong></p><p>题目要求最大合金数，已知在一个方案中，制作合金数越多，所需的money就越大。所以存在单调性，可以使用二分查找的算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxNumberOfAlloys</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span>, budget: <span class="hljs-built_in">int</span>, composition: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], stock: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], cost: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> com <span class="hljs-keyword">in</span> composition:<br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">judge</span>(<span class="hljs-params">num</span>):<br>                money = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">for</span> x, y, z <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(com, stock, cost):<br>                    <span class="hljs-keyword">if</span> y &lt; x * num:<br>                        money += (x * num - y) * z<br>                        <span class="hljs-keyword">if</span> money &gt; budget:<br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br>            left, right = <span class="hljs-number">0</span>, <span class="hljs-number">10</span> ** <span class="hljs-number">9</span><br>            cnt = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> left &lt;= right: <span class="hljs-comment"># 二分查找最大合金数</span><br>                m = (left + right) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">if</span> judge(m):<br>                    cnt = m<br>                    left = m + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    right = m - <span class="hljs-number">1</span><br>            ans = <span class="hljs-built_in">max</span>(ans, cnt)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全排列</title>
    <link href="/2023/09/13/%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <url>/2023/09/13/%E5%85%A8%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h1><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,2,3]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[1,2,3]</span>,<span class="hljs-comment">[1,3,2]</span>,<span class="hljs-comment">[2,1,3]</span>,<span class="hljs-comment">[2,3,1]</span>,<span class="hljs-comment">[3,1,2]</span>,<span class="hljs-comment">[3,2,1]</span>]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：nums = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-string">[[0,1],[1,0]]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：nums = [<span class="hljs-number">1</span>]<br>输出：<span class="hljs-string">[[1]]</span> <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul><p>解法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">permute</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        s = <span class="hljs-built_in">set</span>(nums)<br>        res = []<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">s, l</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">0</span>:<br>                res.append(l)<br>            <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>                <span class="hljs-keyword">if</span> num <span class="hljs-keyword">in</span> s:<br>                    solve(s - &#123;num&#125;, l + [num])<br>        <br>        solve(s, [])<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>解法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">permute</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        res = []<br>        n = <span class="hljs-built_in">len</span>(nums)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">first</span>):<br>            <span class="hljs-keyword">if</span> first == n:<br>                res.append(nums[:])<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(first, n):<br>                nums[first], nums[i] = nums[i], nums[first]<br>                solve(first + <span class="hljs-number">1</span>)<br>                nums[first], nums[i] = nums[i], nums[first]<br>        <br>        solve(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2023/08/26/Spring/"/>
    <url>/2023/08/26/Spring/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>@Autowired注解：默认使用类型进行装配，当ioc容器中存在多个当前类型的bean，那么会找到ioc容器中id为属性名的Bean进行装配，或者使用@Qualifier注解来指定固定id的bean。</p><p>@Resource注解：@Resource(name &#x3D; “”) 默认通过id进行匹配来注入bean，如果byId方式无法找到bean，那么就使用byType的方式来注入。</p><p>对基本引用对象进行赋值：</p><p>①对成员变量直接复制<br>②使用**@Value**注解，一般情况下在读取外部配置文件时使用<br>@Value使用默认值语法，@Value(“${key:<strong>默认值</strong>}”)</p><p>SpringAop底层是使用动态代理实现的，当目标类有实现的接口，那么SpringAop会使用jdk动态代理；若目标类没有实现接口，那么SpringAop会使用cglib动态代理。</p><p>声明一个接口，接口有一个实现类，然后使用AOP的切面类，对上面接口的实现类应用通知，此时当进行ioc注入时，只能够通过接口类型来获取，不能通过实现类类型来获取。</p><p>因为当目标类有接口时，aop会对目标类进行jdk动态代理，在ioc容器中只保存代理类，不保存目标类。</p><p>当目标类没有接口，此时对该目标类应用通知，此时aop会使用cglib动态代理，此时可以通过目标类类型来接收注入。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven</title>
    <link href="/2023/08/23/Maven/"/>
    <url>/2023/08/23/Maven/</url>
    
    <content type="html"><![CDATA[<h2 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h2><p>引入maven依赖有四个属性，groupId、artifactId和version是必须指定的，而scope是可选的。</p><p>scope指的是引入依赖的作用范围，有四个可选值：compile、test、runtime和provided，默认是compile</p><table><thead><tr><th>可选值</th><th>作用范围</th><th>实例</th></tr></thead><tbody><tr><td>compile</td><td>在main、test、打包和运行时都会使用</td><td>大部分都使用</td></tr><tr><td>test</td><td>只能在test目录下使用</td><td>junit</td></tr><tr><td>runtime</td><td>只有在打包和运行时使用</td><td>mysql</td></tr><tr><td>provided</td><td>main、test中使用，打包和运行不使用</td><td>servlet</td></tr></tbody></table><p>依赖传递：导入依赖，会同时导入依赖的依赖</p><p>依赖冲突：发现已存在依赖（重复依赖、循环依赖）会终止依赖传递，避免循环依赖</p><p>依赖冲突的解决原则：</p><ul><li>谁短谁优先。例如A的依赖传递  A - C -B1.0 ， F - B2.0   ，那么maven工程中保留的是B2.0</li><li>谁在上谁优先，若依赖传递链长度相同，则谁先声明则保留谁</li></ul><p>若发生冲突，则发生版本冲突的依赖的后续依赖不会被导入</p><h2 id="Maven命令"><a href="#Maven命令" class="headerlink" title="Maven命令"></a>Maven命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mvn clean</td><td>清理编译或打包的项目结构，删除target文件夹</td></tr><tr><td>mvn compile</td><td>编译项目，生成target文件</td></tr><tr><td>mvn test</td><td>执行测试源码</td></tr><tr><td>mvn site</td><td>生成一个项目依赖信息的展示页面</td></tr><tr><td>mvn package</td><td>打包项目，生成jar、war文件</td></tr><tr><td>mvn install</td><td>打包后上传到maven本地仓库（本地部署）</td></tr><tr><td>mvn deploy</td><td>只打包  ，上传到Maven私服仓库（私服部署）</td></tr></tbody></table><p>构建命令周期：触发周期后的命令会自动触发同一周期前的命令</p><p>3个周期：</p><ul><li>清理：clean</li><li>构建：compile、test、package、install&#x2F;deploy</li><li>报告：site</li></ul><p>最佳使用方案：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">打包：<span class="hljs-keyword">mvn</span> clean package<br>重新编译： <span class="hljs-keyword">mvn</span> clean compile<br>本地部署： <span class="hljs-keyword">mvn</span> clean install<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA创建JavaEE项目</title>
    <link href="/2023/08/23/IDEA%E5%88%9B%E5%BB%BAJavaEE%E9%A1%B9%E7%9B%AE/"/>
    <url>/2023/08/23/IDEA%E5%88%9B%E5%BB%BAJavaEE%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h2><ul><li>在IDEA中创建普通的Maven项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── pom.xml<br>└── src<br>    ├── main<br>    │   ├── java<br>    │   ├── resources<br>    └── <span class="hljs-built_in">test</span><br>        └── java<br></code></pre></td></tr></table></figure><ul><li>在main目录下创建webapp目录，在webapp目录下创建WEB-INF目录，在WEB-INF目录下创建web.xml文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">├── pom.<span class="hljs-keyword">xml</span><br><span class="hljs-title">└── src</span><br>    ├── main<br>    │   ├── java<br>    │   ├── resources<br>    │   └── webapp<br>    │       └── WEB<span class="hljs-literal">-INF</span><br>    │           └── web.<span class="hljs-keyword">xml</span><br>    <span class="hljs-title">└── test</span><br>        └── java<br></code></pre></td></tr></table></figure><ul><li><p>再POM.xml文件中将打包方式改为war  <code>&lt;packaging&gt;war&lt;/packaging&gt;</code> </p></li><li><p>然后刷新Maven</p></li></ul><h2 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h2><p>在IDEA上创建普通的Maven项目，然后在IDEA中下载<code>JBLJavaToWeb</code> 插件，然后在项目根目录上右键，选择<code>JBLJavaToWeb</code> 就能创建JavaWeb项目。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>elasticSearch的DSL语句</title>
    <link href="/2023/08/15/elasticSearch%E7%9A%84DSL%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/08/15/elasticSearch%E7%9A%84DSL%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Click the Variables button, above, to create your own variables.</span><br>GET <span class="hljs-variable">$&#123;exampleVariable1&#125;</span> // _search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;exampleVariable2&#125;</span>&quot;</span>: &#123;&#125; <br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 模拟请求</span><br>GET /<br><br><span class="hljs-comment"># 测试分词器</span><br>POST /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;小米手机充电器&quot;</span>,<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 测试分词器</span><br>POST /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;传智教育的课程可以白嫖，而且就业率高达95%，奥利给！&quot;</span>,<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>&#125;<br><br><br><span class="hljs-comment"># 创建索引库</span><br>PUT /heima<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;info&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;email&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>        <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-literal">false</span><br>      &#125;,<br>      <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span>,<br>        <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;firstName&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;lastName&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 查看索引库</span><br>GET /heima<br><br><br><span class="hljs-comment"># 删除索引库</span><br>DELETE /heima<br><br><span class="hljs-comment"># 修改索引库， es不允许修改索引库，只允许在索引库中添加新字段</span><br>PUT /heima/_mapping<br>&#123;<br>  <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;age&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment"># 向索引库插入文档</span><br>POST /heima/_doc/1<br>&#123;<br>  <span class="hljs-string">&quot;info&quot;</span>: <span class="hljs-string">&quot;黑马程序员Java讲师&quot;</span>,<br>  <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;zy@itcast.cn&quot;</span>,<br>  <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;firstName&quot;</span>: <span class="hljs-string">&quot;云&quot;</span>,<br>    <span class="hljs-string">&quot;lastName&quot;</span>: <span class="hljs-string">&quot;赵&quot;</span><br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment"># 查看索引库中的文档</span><br>GET /heima/_doc/1<br><br><span class="hljs-comment"># 删除索引库中的文档</span><br>DELETE /heima/_doc/1<br><br><span class="hljs-comment"># 修改索引库中的文档，两种方式</span><br><br><span class="hljs-comment"># 1.和创建一样，写出全字段，将POST方式改为PUT （既能修改，也能新增）</span><br>PUT /heima/_doc/1<br>&#123;<br>  <span class="hljs-string">&quot;info&quot;</span>: <span class="hljs-string">&quot;黑马程序员高级Java讲师&quot;</span>,<br>  <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;zhaoyun@itcast.cn&quot;</span>,<br>  <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;firstName&quot;</span>: <span class="hljs-string">&quot;云&quot;</span>,<br>    <span class="hljs-string">&quot;lastName&quot;</span>: <span class="hljs-string">&quot;赵&quot;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 2.修改指定字段</span><br>POST /heima/_update/1<br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;ZYun@itcast.cn&quot;</span><br>  &#125;<br>&#125;<br><br><br><br><span class="hljs-comment"># 酒店的mapping</span><br>PUT /hotel<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;id&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>        <span class="hljs-string">&quot;copy_to&quot;</span>: <span class="hljs-string">&quot;all&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;address&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>        <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-literal">false</span><br>      &#125;,<br>      <span class="hljs-string">&quot;price&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;score&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;brand&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>        <span class="hljs-string">&quot;copy_to&quot;</span>: <span class="hljs-string">&quot;all&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;city&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;startName&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;business&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>        <span class="hljs-string">&quot;copy_to&quot;</span>: <span class="hljs-string">&quot;all&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;location&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;geo_point&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;pic&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>        <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-literal">false</span><br>      &#125;,<br>      <span class="hljs-string">&quot;all&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 查询所有</span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># match 单字段查询</span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;all&quot;</span>: <span class="hljs-string">&quot;外滩如家&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># multi_match  多字段查询</span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;multi_match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;外滩如家&quot;</span>,<br>      <span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>]<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment"># term 精确查询</span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;brand&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;7天酒店&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># range 范围查询   gte大于等于  gt大于</span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;gte&quot;</span>: 100,<br>        <span class="hljs-string">&quot;lte&quot;</span>: 300<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># geo_bounding_box 地理查询</span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;geo_bounding_box&quot;</span>: &#123; <br>      <span class="hljs-string">&quot;location&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;top_left&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;lat&quot;</span>: 42,<br>          <span class="hljs-string">&quot;lon&quot;</span>: 110<br>        &#125;,<br>        <span class="hljs-string">&quot;bottom_right&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;lat&quot;</span>: 40,<br>          <span class="hljs-string">&quot;lon&quot;</span>: 120<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># function score 查询</span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;function_score&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;all&quot;</span>: <span class="hljs-string">&quot;外滩如家&quot;</span><br>        &#125;<br>      &#125;, <br>      <span class="hljs-string">&quot;functions&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;如家&quot;</span><br>            &#125;<br>          &#125;,<br>          <span class="hljs-string">&quot;weight&quot;</span>: 2<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;boost_mode&quot;</span>: <span class="hljs-string">&quot;sum&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># bool查询</span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;term&quot;</span>: &#123;<span class="hljs-string">&quot;city&quot;</span>:<span class="hljs-string">&quot;上海&quot;</span>&#125;&#125;<br>      ],<br>      <span class="hljs-string">&quot;should&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;term&quot;</span>: &#123;<span class="hljs-string">&quot;brand&quot;</span>:<span class="hljs-string">&quot;皇冠假日&quot;</span>&#125;&#125;,<br>        &#123;<span class="hljs-string">&quot;term&quot;</span>: &#123;<span class="hljs-string">&quot;brand&quot;</span>:<span class="hljs-string">&quot;华美达&quot;</span>&#125;&#125;<br>      ],<br>      <span class="hljs-string">&quot;must_not&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;range&quot;</span>: &#123;<span class="hljs-string">&quot;price&quot;</span>: &#123;<span class="hljs-string">&quot;lte&quot;</span>: 500&#125;&#125;&#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;range&quot;</span>: &#123;<span class="hljs-string">&quot;score&quot;</span>: &#123;<span class="hljs-string">&quot;gte&quot;</span>: 45&#125;&#125;&#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># bool 查询，查询名字包含如家，价格不高于400，并且距离人10km以内的酒店</span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;match&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;如家&quot;</span>&#125;&#125;<br>      ],<br>      <span class="hljs-string">&quot;must_not&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;range&quot;</span>: &#123;<span class="hljs-string">&quot;price&quot;</span>: &#123;<span class="hljs-string">&quot;gt&quot;</span>: 400&#125;&#125;&#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;geo_distance&quot;</span>: &#123;<span class="hljs-string">&quot;distance&quot;</span>: <span class="hljs-string">&quot;10km&quot;</span>, <span class="hljs-string">&quot;location&quot;</span>: &#123;<span class="hljs-string">&quot;lat&quot;</span>: 31.21, <span class="hljs-string">&quot;lon&quot;</span>: 121.5&#125; &#125;&#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 结果排序  搜索包含如家的，首先按照距离升序排序，如家距离相同，按照评分降序，若评分相同，按照价格升序排序</span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<span class="hljs-string">&quot;all&quot;</span>:<span class="hljs-string">&quot;如家&quot;</span>&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;_geo_distance&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;location&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;lat&quot;</span>: 31.21,<br>          <span class="hljs-string">&quot;lon&quot;</span>: 121.5<br>        &#125;,<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span>,<br>        <span class="hljs-string">&quot;unit&quot;</span>: <span class="hljs-string">&quot;km&quot;</span><br>      &#125;, <br>      <span class="hljs-string">&quot;score&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;, <br>      <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br><br><span class="hljs-comment"># 设置分页参数  from：从哪个文档开始， size：分页的大小 </span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<span class="hljs-string">&quot;all&quot;</span>:<span class="hljs-string">&quot;如家&quot;</span>&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;from&quot;</span>: 0,<br>  <span class="hljs-string">&quot;size&quot;</span>: 20, <br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br><br><span class="hljs-comment"># 高亮显示  默认搜索的match和高亮的field字段一致才高亮，否则需要加&quot;require_field_match&quot;: &quot;false&quot;</span><br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;all&quot;</span>: <span class="hljs-string">&quot;如家&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;pre_tags&quot;</span>: <span class="hljs-string">&quot;&lt;em&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;post_tags&quot;</span>: <span class="hljs-string">&quot;&lt;/em&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;require_field_match&quot;</span>: <span class="hljs-string">&quot;false&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker命令</title>
    <link href="/2023/08/13/docker%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/08/13/docker%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h1><h2 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取镜像</span><br>docker pull 镜像名称:版本<br><br><span class="hljs-comment"># 查看安装的所有镜像</span><br>docker images<br><br><span class="hljs-comment"># 将镜像保存为压缩文件</span><br>docker save -o 文件名 镜像<span class="hljs-built_in">id</span>(或者 镜像名称:版本)<br><br><span class="hljs-comment"># 从本地的压缩文件中加载镜像</span><br>docker load -i 文件名<br><br><span class="hljs-comment"># 删除镜像</span><br>docker rmi 镜像<span class="hljs-built_in">id</span>(或者 镜像名称:版本)<br><br><span class="hljs-comment"># 将镜像推送到仓库</span><br>docker push <br></code></pre></td></tr></table></figure><h2 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 运行容器</span><br>docker run --name 容器名 -p 端口映射 -d(后台运行) 镜像名<br><br><span class="hljs-comment"># 删除指定容器</span><br>docker <span class="hljs-built_in">rm</span> -f(强制删除运行中的容器) 容器名<br><br><span class="hljs-comment"># 暂停某个容器(运行 -&gt; 暂停)</span><br>docker pause 容器名<br><br><span class="hljs-comment"># 恢复某个容器(暂停 -&gt; 运行)</span><br>docker unpause 容器名<br><br><span class="hljs-comment"># 停止某个容器(运行 -&gt; 停止)</span><br>docker stop 容器名<br><br><span class="hljs-comment"># 恢复某个容器(停止 -&gt; 运行)</span><br>docker start 容器名<br><br><span class="hljs-comment"># 查询所有运行的容器及其状态</span><br>docker ps -a(查询所有的容器，而非仅查询运行中的)<br><br><span class="hljs-comment"># 查询容器运行日志</span><br>docker logs -f(持续跟踪日志) 容器名<br><br><span class="hljs-comment"># 进行容器执行命令</span><br>docker <span class="hljs-built_in">exec</span> -it(标准输入输出) 容器名  bash(使用bash执行命令)<br></code></pre></td></tr></table></figure><h2 id="数据卷相关命令"><a href="#数据卷相关命令" class="headerlink" title="数据卷相关命令"></a>数据卷相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个数据卷</span><br>docker volume create<br><br><span class="hljs-comment"># 显示一个或多个数据集信息</span><br>docker volume inspect<br><br><span class="hljs-comment"># 列出所有的volume</span><br>docker volume <span class="hljs-built_in">ls</span><br><br><span class="hljs-comment"># 删除未使用的volume</span><br>docker volume prune<br><br><span class="hljs-comment"># 删除指定的一个或多个volume</span><br>docker volume <span class="hljs-built_in">rm</span><br><br><span class="hljs-comment"># 挂载数据集   在创建容器的时候可以指定挂载数据卷</span><br>docker run --name 容器名 -v 数据卷名:容器内的目录  -p 端口映射 镜像名<br><br><span class="hljs-comment"># 将本机目录挂载在容器中</span><br>docker run --name 容器名 -v 本机目录:容器内的目录  -p 端口映射 镜像名<br></code></pre></td></tr></table></figure><p>macOS数据集不能直接进入，需要使用debian镜像连接进入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh<br><br><span class="hljs-built_in">cd</span> /var/lib/docker/volumes<br></code></pre></td></tr></table></figure><h2 id="制作docker镜像"><a href="#制作docker镜像" class="headerlink" title="制作docker镜像"></a>制作docker镜像</h2><p>创建一个新的文件夹，在文件夹里面放项目所需要的资源，例如java的jar包，java的jdk等</p><p>当前文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">|____Dockerfile<br>|____jdk8.tar.gz<br>|____docker-demo.jar<br></code></pre></td></tr></table></figure><p>Dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定基础镜像</span><br>FROM ubuntu:16.04<br><span class="hljs-comment"># 配置环境变量，JDK的安装目录</span><br>ENV JAVA_DIR=/usr/local<br><br><span class="hljs-comment"># 拷贝jdk和java项目的包</span><br>COPY ./jdk8.tar.gz <span class="hljs-variable">$JAVA_DIR</span>/<br>COPY ./docker-demo.jar /tmp/app.jar<br><br><span class="hljs-comment"># 安装JDK</span><br>RUN <span class="hljs-built_in">cd</span> <span class="hljs-variable">$JAVA_DIR</span> \<br> &amp;&amp; tar -xf ./jdk8.tar.gz \<br> &amp;&amp; <span class="hljs-built_in">mv</span> ./jdk1.8.0_202 ./java8<br><br><br><span class="hljs-comment"># 配置环境变量</span><br>ENV JAVA_HOME=<span class="hljs-variable">$JAVA_DIR</span>/java8<br>ENV PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br><br><span class="hljs-comment"># 暴露端口</span><br>EXPOSE 8090<br><span class="hljs-comment"># 入口，java项目的启动命令</span><br>ENTRYPOINT java -jar /tmp/app.jar<br></code></pre></td></tr></table></figure><p>然后执行<code>docker build -t javaweb:1.0 .</code> 来制作镜像</p><p>执行<code> docker run --name web -p 8090:8090 -d javaweb:1.0</code> 命令来生成容器</p><p>如果要制成的镜像使用java8+Ubuntu的环境，那么Dockerfile可以简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定基础镜像</span><br>FROM java:8-alpine<br><span class="hljs-comment"># 拷贝java项目</span><br>COPY ./docker-demo.jar /tmp/app.jar<br><span class="hljs-comment"># 暴露端口</span><br>EXPOSE 8090<br><span class="hljs-comment"># 入口，java项目的启动命令</span><br>ENTRYPOINT java -jar /tmp/app.jar<br></code></pre></td></tr></table></figure><h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><p>代替Dockerfile快速构建和部署集群</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">version</span> <span class="hljs-string">&quot;3.8&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.25</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/xxx</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/xxxxx</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-string">build</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">8090:</span> <span class="hljs-number">8090</span><br></code></pre></td></tr></table></figure><p>代替Dockerfile命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name mysql -e MYSQL_ROOT_PASSWORD=123 \<br>  -p 3306:3306 -v /xxx -v /xxxxx -d  mysql:5.7.25<br><br><span class="hljs-comment"># 构建镜像</span><br>docker build -t web:1.0 .<br><span class="hljs-comment"># 运行容器</span><br>docker run --name web -p 8090:8090 -d web:1.0<br></code></pre></td></tr></table></figure><p>微服务创建docker镜像的例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.2&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">nacos:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">zhusaidong/nacos-server-m1:2.0.3</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MODE:</span> <span class="hljs-string">standalone</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8848:8848&quot;</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">ibex/debian-mysql-server-5.7</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-number">123</span><br>      <span class="hljs-attr">MYSQL_ROOT_HOST:</span> <span class="hljs-string">&#x27;%&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span><br>  <span class="hljs-attr">userservice:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./user-service</span><br>  <span class="hljs-attr">orderservice:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./order-service</span><br>  <span class="hljs-attr">gateway:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./gateway</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;10010:10010&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis相关知识</title>
    <link href="/2023/07/31/redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/07/31/redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><p>Redis是一个基于内存的key-value结构的数据库</p><ul><li>基于内存存储，读写性能高</li><li>适合存储热点数据（热点商品、资讯、新闻等）</li></ul><h2 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h2><ul><li>字符串 string</li><li>哈希 hash</li><li>列表 list</li><li>集合 set</li><li>有序集合 sorted set、zset</li></ul><img src="image-20230731142146156.png" alt="image-20230731142146156" style="zoom:50%;" /><h2 id="Spring-Data-Redis的使用方式"><a href="#Spring-Data-Redis的使用方式" class="headerlink" title="Spring Data Redis的使用方式"></a>Spring Data Redis的使用方式</h2><ol><li>导入Spring Data Redis的maven坐标</li><li>配置redis的数据源</li><li>编写配置类，创建RedisTemplate对象</li><li>通过RedisTemplate对象操作redis</li></ol>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git操作</title>
    <link href="/2023/07/14/git%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/07/14/git%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>git是一个版本控制的工具</p><h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置用户名</span><br>git config --global user.name <span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-comment"># 配置邮箱</span><br>git config --global user.email <span class="hljs-string">&quot;xxx@xx.com&quot;</span><br><br><span class="hljs-comment"># 保存用户信息，不用每次都输入</span><br>git config --global credential.helper store<br><br><span class="hljs-comment"># 查看用户的配置信息</span><br>git config --global --list<br><br><span class="hljs-comment"># 创建仓库</span><br>git init   <span class="hljs-comment"># 将自己的目录变为仓库</span><br>git init name  <span class="hljs-comment"># 在当前目录下创建一个name的目录，把name初始化为仓库</span><br>git <span class="hljs-built_in">clone</span> xxx.git   <span class="hljs-comment"># 克隆一个已经存在的仓库</span><br><br><span class="hljs-comment"># 查看当前的状态</span><br>git status<br><br><span class="hljs-comment"># 保存到暂存区</span><br>git add file<br><br><span class="hljs-comment"># 保留本地区file文件，删除暂存区和仓库中的file文件</span><br>git <span class="hljs-built_in">rm</span> --cached file  <br><span class="hljs-comment"># 同时删除本地区、暂存区的file文件 后面加上 git commit 就能同时删除仓库中的file文件</span><br>git <span class="hljs-built_in">rm</span> file  <br><br><span class="hljs-comment"># 把暂存区中的所有文件提交到仓库中   -m 后面写注释</span><br>git commit -m xxx<br><br><span class="hljs-comment"># 查看仓库的提交信息</span><br>git <span class="hljs-built_in">log</span><br>git <span class="hljs-built_in">log</span> --oneline   <span class="hljs-comment"># 查看简短的提交信息</span><br><br><span class="hljs-comment"># 回退版本</span><br>git reset --soft <span class="hljs-built_in">id</span>   <span class="hljs-comment"># 回退版本，但保留工作区和暂存区的内容</span><br>git reset --hard <span class="hljs-built_in">id</span>   <span class="hljs-comment"># 回退版本，丢弃工作区和暂存区的内容</span><br>git reset --mixed <span class="hljs-built_in">id</span>  <span class="hljs-comment"># 回退版本，只保留工作区，丢弃暂存区的内容</span><br><br><span class="hljs-comment"># 查看暂存区内容</span><br>git ls-files<br><br><span class="hljs-comment"># 查看git的所有操作</span><br>git reflog<br><br><span class="hljs-comment"># 根据git的操作id，退到这个操作前</span><br>git reset --hard <span class="hljs-built_in">id</span> <br><br><span class="hljs-comment"># 查看差异</span><br>git diff   <span class="hljs-comment"># 查看工作区和暂存区相同文件的差异</span><br>git diff HEAD  <span class="hljs-comment"># 查看工作区和仓库中文件的差异</span><br>git diff --cache  <span class="hljs-comment"># 查看暂存区和仓库文件的差异</span><br><span class="hljs-comment"># 比较两个版本之间的差异  id为提交操作的id  HEAD表示最新版本的id  </span><br><span class="hljs-comment"># HEAD~ 和 HEAD^ 表示上一版本的id HEAD~n 表示最新版本的前n个版本的id</span><br>git diff id1 id2  <br>git diff id1 id2 file <span class="hljs-comment"># 查看两个版本直接file这个文件的差异</span><br>git diff branch1 branch2  <span class="hljs-comment"># 查看两个分支之间的差异</span><br></code></pre></td></tr></table></figure><p>git中有三个区域，工作区、暂存区和本地仓库区。</p><p>当前整个目录就是工作区，然后使用<code>git add file</code> 将文件file保存的暂存区，最后使用<code>git commit</code> 将暂存区的所有文件提交到本地仓库。</p><p>![截屏2023-07-14 20.59.47](..&#x2F;..&#x2F;..&#x2F;..&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-07-14 20.59.47.png)</p><p>.gitignore文件来设置对某种类型的文件不提交到仓库中，从而让仓库变得比较整洁。</p><p>通常需要忽略日志文件，编译后的文件、压缩文件以及涉及身份、密码、口令等敏感文件等。</p><p>文件夹的格式是以<code>/</code> 结尾</p><p>.gitignore的内容可以使用通配符</p><h2 id="关联远程仓库Github"><a href="#关联远程仓库Github" class="headerlink" title="关联远程仓库Github"></a>关联远程仓库Github</h2><p>如果当前的本地仓库是在远程仓库中clone的，那么当修改完本地仓库时，只需要运行<code>git push</code> 就能把本地仓库同步到远程仓库。</p><p>如果当前的本地仓库是本地通过<code>git init</code>创建的，并且在本地已经执行过<code>git add</code> 和 <code>git commit</code> 命令后，那么需要以下步骤把本地仓库同步到远程仓库。</p><ol><li>在github上创建仓库，复制仓库的url地址：<a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;</a>:xxx&#x2F;xxx.git</li><li>然后运行<code>git remote add</code>  任意起个name  url</li><li>然后<code>git branch -M main</code> 指定分支为main</li><li>然后 <code>git push -u name main:main</code>  将本地的main分支推送到远程仓库的main分支</li></ol><p>当远程仓库做出修改后，可以使用<code>git pull 远程仓库名 远程分支名: 本地分支名</code> 来将远程仓库同步到本地仓库，当分支名为main时可以省略。</p><p><code>git pull</code>命令会自动进行合并操作，使用<code>git fetch</code>就是只拉取内容，然后自己可以手动合并。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bsah"># 查看分支<br>git branch<br><br># 创建分支<br>git branch 分支名<br><br># 切换分支<br>git checkout 分支名  # 有歧义<br>git switch 分支名  # 常用<br><br># 合并分支<br>git merge 分支名name   # 将name分支合并到当前分支<br><br># 查看分支图<br>git log --graph --oneline --decorate --all<br><br># 合并后删除分支<br>git branch -d 分支名<br><br># 未合并删除分支<br>git branch -D 分支名<br><br># 当在两个分支中同时修改一个文件，并且要合并两个分支时，会显示合并冲突，并把冲突的结果写到了这个文件中；此时可以手动修改这个文件然后再commit<br><br># 显示冲突后想中断这次合并，此时当前分支的文件也被删除了<br>git merge --abort<br><br></code></pre></td></tr></table></figure><p>合并分支还有另外一种方式，rebase（变基）。这个操作可以在任一分支上使用。</p><p>若在branch1上执行<code>git rebase branch2</code> ，那么会将交汇点到branch1当前指针直接的操作合并到branch2当前指针后面；若在branch2上执行<code>git rebase branch1</code> ，那么会将交汇点到branch2当前指针直接的操作合并到branch1当前指针后面。</p><h2 id="两条合并分支命令的优缺点："><a href="#两条合并分支命令的优缺点：" class="headerlink" title="两条合并分支命令的优缺点："></a>两条合并分支命令的优缺点：</h2><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>优点：不会破坏原分支的提交历史，方便回溯和查看</p><p>缺点：会产生额外的提交节点，分支图比较复杂</p><h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3><p>优点：不会新增额外的提交记录，形成线性历史，比较干净和直观</p><p>缺点：会改变提交历史，改变了当前分支branch out的节点。避免在共享分支使用</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在二叉树中分配硬币</title>
    <link href="/2023/07/14/%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%88%86%E9%85%8D%E7%A1%AC%E5%B8%81/"/>
    <url>/2023/07/14/%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%88%86%E9%85%8D%E7%A1%AC%E5%B8%81/</url>
    
    <content type="html"><![CDATA[<p>给你一个有 <code>n</code> 个结点的二叉树的根结点 <code>root</code> ，其中树中每个结点 <code>node</code> 都对应有 <code>node.val</code> 枚硬币。整棵树上一共有 <code>n</code> 枚硬币。</p><p>在一次移动中，我们可以选择两个相邻的结点，然后将一枚硬币从其中一个结点移动到另一个结点。移动可以是从父结点到子结点，或者从子结点移动到父结点。</p><p>返回使每个结点上 <strong>只有</strong> 一枚硬币所需的 <strong>最少</strong> 移动次数。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/01/18/tree1.png" alt="img"></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：root </span>=<span class="hljs-string"> [3,0,0]</span><br><span class="hljs-string">输出：2</span><br><span class="hljs-string">解释：一枚硬币从根结点移动到左子结点，一枚硬币从根结点移动到右子结点。</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/01/18/tree2.png" alt="img"></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：root </span>=<span class="hljs-string"> [0,3,0]</span><br><span class="hljs-string">输出：3</span><br><span class="hljs-string">解释：将两枚硬币从根结点的左子结点移动到根结点（两次移动）。然后，将一枚硬币从根结点移动到右子结点。</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点的数目为 <code>n</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>0 &lt;= Node.val &lt;= n</code></li><li>所有 <code>Node.val</code> 的值之和是 <code>n</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">distributeCoins</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        self.res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">help</span>(<span class="hljs-params">root</span>):<br>            <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            left = <span class="hljs-built_in">help</span>(root.left)  <span class="hljs-comment"># 左子树缺 left 个</span><br>            right = <span class="hljs-built_in">help</span>(root.right) <span class="hljs-comment"># 右子树缺 right 个</span><br>            <span class="hljs-keyword">if</span> left * right &gt;= <span class="hljs-number">0</span>: <span class="hljs-comment"># 左右子树都缺或都有剩余</span><br>                self.res += (<span class="hljs-built_in">abs</span>(left) + <span class="hljs-built_in">abs</span>(right))<br>            <span class="hljs-keyword">elif</span> left &lt; <span class="hljs-number">0</span>: <span class="hljs-comment"># 左子树缺，右子树有剩余</span><br>                self.res += (right -<span class="hljs-built_in">abs</span>(left) + <span class="hljs-number">2</span> * <span class="hljs-built_in">abs</span>(left))<br>            <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 右子树缺，左子树有剩余</span><br>                self.res += (left - <span class="hljs-built_in">abs</span>(right) + <span class="hljs-number">2</span> * <span class="hljs-built_in">abs</span>(right))<br>            <span class="hljs-keyword">return</span> root.val - <span class="hljs-number">1</span> + left + right<br><br>        <br>        <span class="hljs-built_in">help</span>(root)<br>        <span class="hljs-keyword">return</span> self.res<br></code></pre></td></tr></table></figure><p>上面的分类讨论的left和right的正负号，发现四种情况下都等价与于 self.res +&#x3D; (abs(left) + abs(right)). 所以可以修改代码为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">distributeCoins</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        self.res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">help</span>(<span class="hljs-params">root</span>):<br>            <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            left = <span class="hljs-built_in">help</span>(root.left)  <span class="hljs-comment"># 左子树缺 left 个</span><br>            right = <span class="hljs-built_in">help</span>(root.right) <span class="hljs-comment"># 右子树缺 right 个</span><br>            self.res += (<span class="hljs-built_in">abs</span>(left) + <span class="hljs-built_in">abs</span>(right))<br>            <span class="hljs-keyword">return</span> root.val - <span class="hljs-number">1</span> + left + right<br><br>        <br>        <span class="hljs-built_in">help</span>(root)<br>        <span class="hljs-keyword">return</span> self.res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置局域网访问主机静态文件</title>
    <link href="/2023/07/14/nginx%E9%85%8D%E7%BD%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AE%E4%B8%BB%E6%9C%BA%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/"/>
    <url>/2023/07/14/nginx%E9%85%8D%E7%BD%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AE%E4%B8%BB%E6%9C%BA%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>在http作用域中添加一个server模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置文件访问</span><br>server &#123;<br><span class="hljs-comment"># 配置端口</span><br>listen       4455;<br>server_name  localhost;<br><span class="hljs-comment"># 配置文件编码，否则中文会乱码</span><br>charset utf-8;<br><br>location / &#123;<br>root html;<br>index index.html;<br>&#125;<br><br>location /download &#123;<br><span class="hljs-comment"># 配置文件路径</span><br><span class="hljs-built_in">alias</span> 文件路径;<br><span class="hljs-comment"># 自动生成index</span><br>autoindex on;<br>&#125;<br><br>error_page   500 502 503 504  /50x.html;<br>location = /50x.html &#123;<br>root   html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时访问<code>localhost:4455/download</code> 就能够在同一局域网内访问主机的静态文件。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS设置局域网访问nginx服务器</title>
    <link href="/2023/07/14/macOS%E8%AE%BE%E7%BD%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AEnginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/07/14/macOS%E8%AE%BE%E7%BD%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AEnginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>想要在mac系统下实现局域网内访问nginx服务器，只需要设置一下防火墙即可。</p><p>设置-&gt;网络-&gt;防火墙-&gt;选项-&gt;点加号添加应用</p><p>选择<code>/opt/homebrew/Cellar/nginx/1.xx.x/bin/nginx</code> 即可实现。</p>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置https</title>
    <link href="/2023/07/14/nginx%E9%85%8D%E7%BD%AEhttps/"/>
    <url>/2023/07/14/nginx%E9%85%8D%E7%BD%AEhttps/</url>
    
    <content type="html"><![CDATA[<h2 id="生成SSL证书"><a href="#生成SSL证书" class="headerlink" title="生成SSL证书"></a>生成SSL证书</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl genrsa -out private.key 2048<br><br>openssl req -new -key private.key -out cert.csr<br><br>openssl req -new -x509 -key private.key -out cacert.pem -days 3650<br></code></pre></td></tr></table></figure><p>在nginx的配置文件所在目录的命令行中输入以上三个命令，根据提示输出信息。此时会得到私钥文件<code>private.key</code> 和证书文件<code>cacert.pem</code> </p><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>在配置文件的http作用域中添加下面的server块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 测试Https配置</span><br>    server &#123;<br>        listen       443 ssl;<br>        server_name  localhost;<br>        <span class="hljs-comment"># 证书文件路径</span><br>        ssl_certificate  证书文件路径;<br>        <span class="hljs-comment"># 证书私钥文件路径</span><br>        ssl_certificate_key  证书私钥文件路径;<br>        <span class="hljs-comment"># ssl验证配置</span><br>        ssl_session_timeout 5m; <span class="hljs-comment"># 缓存有效期</span><br>        <span class="hljs-comment"># 安全链接可选的加密协议</span><br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;<br>        <span class="hljs-comment"># 配置加密套件/加密算法，写法遵循 openssl 标准</span><br>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>        <span class="hljs-comment"># 使用服务器端的首选算法</span><br>        ssl_prefer_server_ciphers on;<br><br>        location / &#123;<br>            root html;<br>            index index.html;<br>        &#125;<br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p>重新加载nginx配置文件<code>nginx -s reload</code> </p><p>在浏览器访问<code>https://localhost:443</code> 就能实现https配置。因为443是http的默认端口，所以也可以直接访问<code>https://localhost</code> .</p><h2 id="将默认的http重定向为https"><a href="#将默认的http重定向为https" class="headerlink" title="将默认的http重定向为https"></a>将默认的http重定向为https</h2><p>添加以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置重定向，http的默认端口是80，所有将访问默认的http重定向到https</span><br>server&#123;<br>listen 80;<br>server_name localhost;    <span class="hljs-comment"># 正常情况下放域名，如 baidu.com  www.baidu.com</span><br><span class="hljs-built_in">return</span> 301 https://$server_name<span class="hljs-variable">$request_uri</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用nginx实现负载均衡</title>
    <link href="/2023/07/13/%E4%BD%BF%E7%94%A8nginx%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2023/07/13/%E4%BD%BF%E7%94%A8nginx%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="模拟场景"><a href="#模拟场景" class="headerlink" title="模拟场景"></a>模拟场景</h2><p>使用Go语言写一个web项目</p><p>web.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 定义路由处理函数</span><br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprint(w, <span class="hljs-string">&quot;&lt;h1&gt;listening 9000&lt;/h1&gt;&quot;</span>)<br>&#125;)<br><span class="hljs-comment">// 启动Web服务器并监听9000端口</span><br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;:9000&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p><code>go run web.go</code>来运行程序</p><p>修改端口为9001,9002进行运行程序，现在三个go项目实现对localhost的9000、9001、9002三个端口进行监听</p><h2 id="修改nginx的配置文件"><a href="#修改nginx的配置文件" class="headerlink" title="修改nginx的配置文件"></a>修改nginx的配置文件</h2><ol><li><p>命令行运行<code>nginx -V</code> 得到nginx的配置文件的路径<code>--conf-path=/opt/homebrew/etc/nginx/nginx.conf</code> </p></li><li><p>打开配置文件，修改http作用域的内容</p></li><li><pre><code class="hljs">     # 在server上面添加下面内容   upstream backend &#123;           server 127.0.0.1:9000;   # 模拟主机1           server 127.0.0.1:9001;   # 模拟主机2           server 127.0.0.1:9002;   # 模拟主机3   &#125; <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><br><span class="hljs-number">4</span>. 修改server作用域内容<br><br><span class="hljs-number">5</span>. ```bash<br>    <span class="hljs-comment"># 对 /app 的请求进行负载均衡</span><br>    <span class="hljs-keyword">location</span> <span class="hljs-title">/app</span> &#123;<br>    proxy_pass http://backend;<br>    &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ol><p>以上就能实现负载均衡，用户对&#x2F;app的访问会被平均分配到主机1、主机2和主机3中（默认使用轮询算法）。</p><p>如果每台主机的性能不同，向对不同的主机分配到不同的访问量，那么值需要加一个weight参数。才是修改为一下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在server上面添加下面内容</span><br> upstream backend &#123;<br> server 127.0.0.1:9000 weight=3;   <span class="hljs-comment"># 模拟主机1</span><br> server 127.0.0.1:9001;   <span class="hljs-comment"># 模拟主机2</span><br> server 127.0.0.1:9002;   <span class="hljs-comment"># 模拟主机3</span><br> &#125;<br></code></pre></td></tr></table></figure><p>这种负载均衡会对每次&#x2F;api请求独立分配一个虚拟主机，若想实现对相同的客户端分配的固定的虚拟主机（这样就能解决一些Session的问题）。修改为以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在server上面添加下面内容</span><br> upstream backend &#123;<br> ip_hash;<br> server 127.0.0.1:9000 weight=3;   <span class="hljs-comment"># 模拟主机1</span><br> server 127.0.0.1:9001;   <span class="hljs-comment"># 模拟主机2</span><br> server 127.0.0.1:9002;   <span class="hljs-comment"># 模拟主机3</span><br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用nginx配置hexo博客</title>
    <link href="/2023/07/13/%E4%BD%BF%E7%94%A8nginx%E9%85%8D%E7%BD%AEhexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/07/13/%E4%BD%BF%E7%94%A8nginx%E9%85%8D%E7%BD%AEhexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="安装nginx和hexo"><a href="#安装nginx和hexo" class="headerlink" title="安装nginx和hexo"></a>安装nginx和hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install hexo<br>brew install nginx<br></code></pre></td></tr></table></figure><h2 id="创建博客目录"><a href="#创建博客目录" class="headerlink" title="创建博客目录"></a>创建博客目录</h2><p>创建一个目录来用来放博客  Blog （路径不用有中文）</p><p>进入Blog目录，使用命令行运行<code>hexo init</code> 命令来初始化博客</p><h2 id="生成html页面"><a href="#生成html页面" class="headerlink" title="生成html页面"></a>生成html页面</h2><p>在Blog目录中，在命令行中运行<code>hexo g</code>来将md格式的博客生成页面</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>命令行运行<code>hexo d</code> 部署，此时当前博客目录中会生成一个public目录</p><h2 id="使用nginx代理"><a href="#使用nginx代理" class="headerlink" title="使用nginx代理"></a>使用nginx代理</h2><p>命令行运行<code>nginx -V</code> 得到配置文件的目录<code>--conf-path=/opt/homebrew/etc/nginx/nginx.conf</code>，打开配置文件。在http括号中添加一下配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 部署Blog</span><br>   <span class="hljs-section">server</span> &#123;<br>       <span class="hljs-attribute">listen</span>       <span class="hljs-number">4000</span>;  <span class="hljs-comment"># 监听的端口名</span><br>       <span class="hljs-attribute">server_name</span>  localhost;<br><br>       <span class="hljs-section">location</span> / &#123;<br>           <span class="hljs-attribute">root</span> xxx/Blog/public;  <span class="hljs-comment"># Blog的目录</span><br>           <span class="hljs-attribute">index</span> index.html;<br>       &#125;<br><br>       <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>       <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>       <span class="hljs-comment">#</span><br>       <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>       <span class="hljs-section">location</span> = /50x.html &#123;<br>           <span class="hljs-attribute">root</span>   html;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建新文件</span><br>hexo new <span class="hljs-string">&#x27;文件名&#x27;</span><br><br><span class="hljs-comment"># 生成静态文件</span><br>hexo g<br><br><span class="hljs-comment"># 部署</span><br>hexo d<br><br><span class="hljs-comment"># clean</span><br>hexo clean<br></code></pre></td></tr></table></figure><h2 id="写博客整个流程"><a href="#写博客整个流程" class="headerlink" title="写博客整个流程"></a>写博客整个流程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&#x27;文件名&#x27;</span><br><span class="hljs-comment"># 编写文件</span><br>hexo clean &amp; hexo g &amp; hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Homebrew用法</title>
    <link href="/2023/07/13/Homebrew%E7%94%A8%E6%B3%95/"/>
    <url>/2023/07/13/Homebrew%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Homebrew 是Mac上的很好的包管理软件，能够一键安装redis、mysql、nginx、docker等流行的软件包。</p><h2 id="下载homebrew（需要代理）"><a href="#下载homebrew（需要代理）" class="headerlink" title="下载homebrew（需要代理）"></a>下载homebrew（需要代理）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="卸载homebrew"><a href="#卸载homebrew" class="headerlink" title="卸载homebrew"></a>卸载homebrew</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="查询可安装的软件包版本（以redis为例）"><a href="#查询可安装的软件包版本（以redis为例）" class="headerlink" title="查询可安装的软件包版本（以redis为例）"></a>查询可安装的软件包版本（以redis为例）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew search redis<br></code></pre></td></tr></table></figure><h2 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install redis<br></code></pre></td></tr></table></figure><h2 id="卸载软件包"><a href="#卸载软件包" class="headerlink" title="卸载软件包"></a>卸载软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew uninstall redis<br></code></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew services start redis<br></code></pre></td></tr></table></figure><h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew services stop redis<br></code></pre></td></tr></table></figure><h2 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew services restart redis<br></code></pre></td></tr></table></figure><h2 id="列出本机brew安装的所有软件包"><a href="#列出本机brew安装的所有软件包" class="headerlink" title="列出本机brew安装的所有软件包"></a>列出本机brew安装的所有软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew list<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
